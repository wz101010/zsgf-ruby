=begin
#用户全部 API 文档

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.13.0-SNAPSHOT

=end

require 'cgi'

module ZSGFClient
  class StorageApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # 聚合查询
    # 根据聚合管道查询指定表中的数据
    # @param table [String] 表名称
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :pipeline 构建聚合查询
    # @return [ObjectListApiResponse]
    def storage_aggregate(table, app_key, opts = {})
      data, _status_code, _headers = storage_aggregate_with_http_info(table, app_key, opts)
      data
    end

    # 聚合查询
    # 根据聚合管道查询指定表中的数据
    # @param table [String] 表名称
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :pipeline 构建聚合查询
    # @return [Array<(ObjectListApiResponse, Integer, Hash)>] ObjectListApiResponse data, response status code and response headers
    def storage_aggregate_with_http_info(table, app_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StorageApi.storage_aggregate ...'
      end
      # verify the required parameter 'table' is set
      if @api_client.config.client_side_validation && table.nil?
        fail ArgumentError, "Missing the required parameter 'table' when calling StorageApi.storage_aggregate"
      end
      pattern = Regexp.new(/^[a-zA-Z0-9_-]{1,100}$/)
      if @api_client.config.client_side_validation && table !~ pattern
        fail ArgumentError, "invalid value for 'table' when calling StorageApi.storage_aggregate, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'app_key' is set
      if @api_client.config.client_side_validation && app_key.nil?
        fail ArgumentError, "Missing the required parameter 'app_key' when calling StorageApi.storage_aggregate"
      end
      # resource path
      local_var_path = '/Storage/{appKey}/{table}/Aggregate'.sub('{' + 'table' + '}', CGI.escape(table.to_s)).sub('{' + 'appKey' + '}', CGI.escape(app_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'pipeline'] = opts[:'pipeline'] if !opts[:'pipeline'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ObjectListApiResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"StorageApi.storage_aggregate",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorageApi#storage_aggregate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 删除数据
    # 删除指定表中指定ID的数据
    # @param table [String] 表名称
    # @param id [String] 数据ID
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @return [BooleanApiResponse]
    def storage_delete(table, id, app_key, opts = {})
      data, _status_code, _headers = storage_delete_with_http_info(table, id, app_key, opts)
      data
    end

    # 删除数据
    # 删除指定表中指定ID的数据
    # @param table [String] 表名称
    # @param id [String] 数据ID
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BooleanApiResponse, Integer, Hash)>] BooleanApiResponse data, response status code and response headers
    def storage_delete_with_http_info(table, id, app_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StorageApi.storage_delete ...'
      end
      # verify the required parameter 'table' is set
      if @api_client.config.client_side_validation && table.nil?
        fail ArgumentError, "Missing the required parameter 'table' when calling StorageApi.storage_delete"
      end
      pattern = Regexp.new(/^[a-zA-Z0-9_-]{1,100}$/)
      if @api_client.config.client_side_validation && table !~ pattern
        fail ArgumentError, "invalid value for 'table' when calling StorageApi.storage_delete, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling StorageApi.storage_delete"
      end
      # verify the required parameter 'app_key' is set
      if @api_client.config.client_side_validation && app_key.nil?
        fail ArgumentError, "Missing the required parameter 'app_key' when calling StorageApi.storage_delete"
      end
      # resource path
      local_var_path = '/Storage/{appKey}/{table}/{id}'.sub('{' + 'table' + '}', CGI.escape(table.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'appKey' + '}', CGI.escape(app_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BooleanApiResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"StorageApi.storage_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorageApi#storage_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 数据详情
    # 获取指定表中指定ID的数据详情
    # @param table [String] 表名称
    # @param id [String] 数据ID
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :project json格式
    # @return [ObjectApiResponse]
    def storage_detail(table, id, app_key, opts = {})
      data, _status_code, _headers = storage_detail_with_http_info(table, id, app_key, opts)
      data
    end

    # 数据详情
    # 获取指定表中指定ID的数据详情
    # @param table [String] 表名称
    # @param id [String] 数据ID
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :project json格式
    # @return [Array<(ObjectApiResponse, Integer, Hash)>] ObjectApiResponse data, response status code and response headers
    def storage_detail_with_http_info(table, id, app_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StorageApi.storage_detail ...'
      end
      # verify the required parameter 'table' is set
      if @api_client.config.client_side_validation && table.nil?
        fail ArgumentError, "Missing the required parameter 'table' when calling StorageApi.storage_detail"
      end
      pattern = Regexp.new(/^[a-zA-Z0-9_-]{1,100}$/)
      if @api_client.config.client_side_validation && table !~ pattern
        fail ArgumentError, "invalid value for 'table' when calling StorageApi.storage_detail, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling StorageApi.storage_detail"
      end
      # verify the required parameter 'app_key' is set
      if @api_client.config.client_side_validation && app_key.nil?
        fail ArgumentError, "Missing the required parameter 'app_key' when calling StorageApi.storage_detail"
      end
      # resource path
      local_var_path = '/Storage/{appKey}/{table}/{id}'.sub('{' + 'table' + '}', CGI.escape(table.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'appKey' + '}', CGI.escape(app_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'project'] = opts[:'project'] if !opts[:'project'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ObjectApiResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"StorageApi.storage_detail",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorageApi#storage_detail\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 查询数据
    # 根据条件查询指定表中的数据
    # @param table [String] 表名称
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter 过滤，json格式
    # @option opts [String] :project 字段映射，json格式
    # @option opts [String] :sort 排序，json格式
    # @option opts [Time] :start_time 开始时间
    # @option opts [Time] :end_time 结束时间
    # @option opts [Boolean] :explain 查看执行计划 (default to false)
    # @option opts [Integer] :take 默认为10 (default to 10)
    # @option opts [Integer] :skip 默认为0 (default to 0)
    # @return [StorageListResultApiResponse]
    def storage_list(table, app_key, opts = {})
      data, _status_code, _headers = storage_list_with_http_info(table, app_key, opts)
      data
    end

    # 查询数据
    # 根据条件查询指定表中的数据
    # @param table [String] 表名称
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter 过滤，json格式
    # @option opts [String] :project 字段映射，json格式
    # @option opts [String] :sort 排序，json格式
    # @option opts [Time] :start_time 开始时间
    # @option opts [Time] :end_time 结束时间
    # @option opts [Boolean] :explain 查看执行计划 (default to false)
    # @option opts [Integer] :take 默认为10 (default to 10)
    # @option opts [Integer] :skip 默认为0 (default to 0)
    # @return [Array<(StorageListResultApiResponse, Integer, Hash)>] StorageListResultApiResponse data, response status code and response headers
    def storage_list_with_http_info(table, app_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StorageApi.storage_list ...'
      end
      # verify the required parameter 'table' is set
      if @api_client.config.client_side_validation && table.nil?
        fail ArgumentError, "Missing the required parameter 'table' when calling StorageApi.storage_list"
      end
      pattern = Regexp.new(/^[a-zA-Z0-9_-]{1,100}$/)
      if @api_client.config.client_side_validation && table !~ pattern
        fail ArgumentError, "invalid value for 'table' when calling StorageApi.storage_list, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'app_key' is set
      if @api_client.config.client_side_validation && app_key.nil?
        fail ArgumentError, "Missing the required parameter 'app_key' when calling StorageApi.storage_list"
      end
      # resource path
      local_var_path = '/Storage/{appKey}/{table}'.sub('{' + 'table' + '}', CGI.escape(table.to_s)).sub('{' + 'appKey' + '}', CGI.escape(app_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'project'] = opts[:'project'] if !opts[:'project'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'startTime'] = opts[:'start_time'] if !opts[:'start_time'].nil?
      query_params[:'endTime'] = opts[:'end_time'] if !opts[:'end_time'].nil?
      query_params[:'explain'] = opts[:'explain'] if !opts[:'explain'].nil?
      query_params[:'take'] = opts[:'take'] if !opts[:'take'].nil?
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'StorageListResultApiResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"StorageApi.storage_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorageApi#storage_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 添加数据
    # 向指定表中添加数据，可以是单个json对象或json数组
    # @param table [String] 表名称（小写字母加数字,1-50位）
    # @param app_key [String] 
    # @param request_body [Array<Object>] json对象 / json数组
    # @param [Hash] opts the optional parameters
    # @return [StringApiResponse]
    def storage_post(table, app_key, request_body, opts = {})
      data, _status_code, _headers = storage_post_with_http_info(table, app_key, request_body, opts)
      data
    end

    # 添加数据
    # 向指定表中添加数据，可以是单个json对象或json数组
    # @param table [String] 表名称（小写字母加数字,1-50位）
    # @param app_key [String] 
    # @param request_body [Array<Object>] json对象 / json数组
    # @param [Hash] opts the optional parameters
    # @return [Array<(StringApiResponse, Integer, Hash)>] StringApiResponse data, response status code and response headers
    def storage_post_with_http_info(table, app_key, request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StorageApi.storage_post ...'
      end
      # verify the required parameter 'table' is set
      if @api_client.config.client_side_validation && table.nil?
        fail ArgumentError, "Missing the required parameter 'table' when calling StorageApi.storage_post"
      end
      pattern = Regexp.new(/^[a-zA-Z0-9_-]{1,100}$/)
      if @api_client.config.client_side_validation && table !~ pattern
        fail ArgumentError, "invalid value for 'table' when calling StorageApi.storage_post, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'app_key' is set
      if @api_client.config.client_side_validation && app_key.nil?
        fail ArgumentError, "Missing the required parameter 'app_key' when calling StorageApi.storage_post"
      end
      # verify the required parameter 'request_body' is set
      if @api_client.config.client_side_validation && request_body.nil?
        fail ArgumentError, "Missing the required parameter 'request_body' when calling StorageApi.storage_post"
      end
      # resource path
      local_var_path = '/Storage/{appKey}/{table}'.sub('{' + 'table' + '}', CGI.escape(table.to_s)).sub('{' + 'appKey' + '}', CGI.escape(app_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'StringApiResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"StorageApi.storage_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorageApi#storage_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 更新数据
    # 更新指定表中指定ID的数据，可以选择全量更新或部分更新
    # @param table [String] 表名称
    # @param id [String] 数据ID
    # @param app_key [String] 
    # @param request_body [Array<Object>] json格式
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :replace 是否为全量更新，默认为false (default to false)
    # @return [BooleanApiResponse]
    def storage_put(table, id, app_key, request_body, opts = {})
      data, _status_code, _headers = storage_put_with_http_info(table, id, app_key, request_body, opts)
      data
    end

    # 更新数据
    # 更新指定表中指定ID的数据，可以选择全量更新或部分更新
    # @param table [String] 表名称
    # @param id [String] 数据ID
    # @param app_key [String] 
    # @param request_body [Array<Object>] json格式
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :replace 是否为全量更新，默认为false (default to false)
    # @return [Array<(BooleanApiResponse, Integer, Hash)>] BooleanApiResponse data, response status code and response headers
    def storage_put_with_http_info(table, id, app_key, request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StorageApi.storage_put ...'
      end
      # verify the required parameter 'table' is set
      if @api_client.config.client_side_validation && table.nil?
        fail ArgumentError, "Missing the required parameter 'table' when calling StorageApi.storage_put"
      end
      pattern = Regexp.new(/^[a-zA-Z0-9_-]{1,100}$/)
      if @api_client.config.client_side_validation && table !~ pattern
        fail ArgumentError, "invalid value for 'table' when calling StorageApi.storage_put, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling StorageApi.storage_put"
      end
      # verify the required parameter 'app_key' is set
      if @api_client.config.client_side_validation && app_key.nil?
        fail ArgumentError, "Missing the required parameter 'app_key' when calling StorageApi.storage_put"
      end
      # verify the required parameter 'request_body' is set
      if @api_client.config.client_side_validation && request_body.nil?
        fail ArgumentError, "Missing the required parameter 'request_body' when calling StorageApi.storage_put"
      end
      # resource path
      local_var_path = '/Storage/{appKey}/{table}/{id}'.sub('{' + 'table' + '}', CGI.escape(table.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'appKey' + '}', CGI.escape(app_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'replace'] = opts[:'replace'] if !opts[:'replace'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'BooleanApiResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"StorageApi.storage_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StorageApi#storage_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
