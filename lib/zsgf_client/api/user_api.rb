=begin
#用户全部 API 文档

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.13.0-SNAPSHOT

=end

require 'cgi'

module ZSGFClient
  class UserApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # 注销账号
    # 清除用户所有附属数据，并注销账号
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @return [BooleanApiResponse]
    def user_deactivate_hard(app_key, opts = {})
      data, _status_code, _headers = user_deactivate_hard_with_http_info(app_key, opts)
      data
    end

    # 注销账号
    # 清除用户所有附属数据，并注销账号
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BooleanApiResponse, Integer, Hash)>] BooleanApiResponse data, response status code and response headers
    def user_deactivate_hard_with_http_info(app_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_deactivate_hard ...'
      end
      # verify the required parameter 'app_key' is set
      if @api_client.config.client_side_validation && app_key.nil?
        fail ArgumentError, "Missing the required parameter 'app_key' when calling UserApi.user_deactivate_hard"
      end
      # resource path
      local_var_path = '/User/{appKey}/DeactivateHard'.sub('{' + 'appKey' + '}', CGI.escape(app_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BooleanApiResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"UserApi.user_deactivate_hard",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_deactivate_hard\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 邮箱登录
    # 使用邮箱进行登录
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [EmailSignInRequest] :email_sign_in_request 登录请求参数
    # @return [TokenModelApiResponse]
    def user_email_sign_in(app_key, opts = {})
      data, _status_code, _headers = user_email_sign_in_with_http_info(app_key, opts)
      data
    end

    # 邮箱登录
    # 使用邮箱进行登录
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [EmailSignInRequest] :email_sign_in_request 登录请求参数
    # @return [Array<(TokenModelApiResponse, Integer, Hash)>] TokenModelApiResponse data, response status code and response headers
    def user_email_sign_in_with_http_info(app_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_email_sign_in ...'
      end
      # verify the required parameter 'app_key' is set
      if @api_client.config.client_side_validation && app_key.nil?
        fail ArgumentError, "Missing the required parameter 'app_key' when calling UserApi.user_email_sign_in"
      end
      # resource path
      local_var_path = '/User/{appKey}/EmailSignIn'.sub('{' + 'appKey' + '}', CGI.escape(app_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'email_sign_in_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'TokenModelApiResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"UserApi.user_email_sign_in",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_email_sign_in\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 邮箱注册
    # 使用邮箱进行注册
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [EmailSignUpRequest] :email_sign_up_request 注册请求参数
    # @return [TokenModelApiResponse]
    def user_email_sign_up(app_key, opts = {})
      data, _status_code, _headers = user_email_sign_up_with_http_info(app_key, opts)
      data
    end

    # 邮箱注册
    # 使用邮箱进行注册
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [EmailSignUpRequest] :email_sign_up_request 注册请求参数
    # @return [Array<(TokenModelApiResponse, Integer, Hash)>] TokenModelApiResponse data, response status code and response headers
    def user_email_sign_up_with_http_info(app_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_email_sign_up ...'
      end
      # verify the required parameter 'app_key' is set
      if @api_client.config.client_side_validation && app_key.nil?
        fail ArgumentError, "Missing the required parameter 'app_key' when calling UserApi.user_email_sign_up"
      end
      # resource path
      local_var_path = '/User/{appKey}/EmailSignUp'.sub('{' + 'appKey' + '}', CGI.escape(app_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'email_sign_up_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'TokenModelApiResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"UserApi.user_email_sign_up",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_email_sign_up\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 手机登录
    # 使用手机号码进行登录
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [PhoneSignInRequest] :phone_sign_in_request 登录请求参数
    # @return [TokenModelApiResponse]
    def user_phone_sign_in(app_key, opts = {})
      data, _status_code, _headers = user_phone_sign_in_with_http_info(app_key, opts)
      data
    end

    # 手机登录
    # 使用手机号码进行登录
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [PhoneSignInRequest] :phone_sign_in_request 登录请求参数
    # @return [Array<(TokenModelApiResponse, Integer, Hash)>] TokenModelApiResponse data, response status code and response headers
    def user_phone_sign_in_with_http_info(app_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_phone_sign_in ...'
      end
      # verify the required parameter 'app_key' is set
      if @api_client.config.client_side_validation && app_key.nil?
        fail ArgumentError, "Missing the required parameter 'app_key' when calling UserApi.user_phone_sign_in"
      end
      # resource path
      local_var_path = '/User/{appKey}/PhoneSignIn'.sub('{' + 'appKey' + '}', CGI.escape(app_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'phone_sign_in_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'TokenModelApiResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"UserApi.user_phone_sign_in",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_phone_sign_in\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 手机注册
    # 使用手机号码进行注册
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [PhoneSignUpRequest] :phone_sign_up_request 注册请求参数
    # @return [TokenModelApiResponse]
    def user_phone_sign_up(app_key, opts = {})
      data, _status_code, _headers = user_phone_sign_up_with_http_info(app_key, opts)
      data
    end

    # 手机注册
    # 使用手机号码进行注册
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [PhoneSignUpRequest] :phone_sign_up_request 注册请求参数
    # @return [Array<(TokenModelApiResponse, Integer, Hash)>] TokenModelApiResponse data, response status code and response headers
    def user_phone_sign_up_with_http_info(app_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_phone_sign_up ...'
      end
      # verify the required parameter 'app_key' is set
      if @api_client.config.client_side_validation && app_key.nil?
        fail ArgumentError, "Missing the required parameter 'app_key' when calling UserApi.user_phone_sign_up"
      end
      # resource path
      local_var_path = '/User/{appKey}/PhoneSignUp'.sub('{' + 'appKey' + '}', CGI.escape(app_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'phone_sign_up_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'TokenModelApiResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"UserApi.user_phone_sign_up",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_phone_sign_up\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 获取个人资料
    # 获取当前用户的个人资料
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @return [UserProfileResultApiResponse]
    def user_profile(app_key, opts = {})
      data, _status_code, _headers = user_profile_with_http_info(app_key, opts)
      data
    end

    # 获取个人资料
    # 获取当前用户的个人资料
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserProfileResultApiResponse, Integer, Hash)>] UserProfileResultApiResponse data, response status code and response headers
    def user_profile_with_http_info(app_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_profile ...'
      end
      # verify the required parameter 'app_key' is set
      if @api_client.config.client_side_validation && app_key.nil?
        fail ArgumentError, "Missing the required parameter 'app_key' when calling UserApi.user_profile"
      end
      # resource path
      local_var_path = '/User/{appKey}/Profile'.sub('{' + 'appKey' + '}', CGI.escape(app_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UserProfileResultApiResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"UserApi.user_profile",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 重置邮箱
    # 通过邮箱验证码重置邮箱
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [AppUserResetEmailRequest] :app_user_reset_email_request 重置邮箱的请求参数
    # @return [BooleanApiResponse]
    def user_reset_email(app_key, opts = {})
      data, _status_code, _headers = user_reset_email_with_http_info(app_key, opts)
      data
    end

    # 重置邮箱
    # 通过邮箱验证码重置邮箱
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [AppUserResetEmailRequest] :app_user_reset_email_request 重置邮箱的请求参数
    # @return [Array<(BooleanApiResponse, Integer, Hash)>] BooleanApiResponse data, response status code and response headers
    def user_reset_email_with_http_info(app_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_reset_email ...'
      end
      # verify the required parameter 'app_key' is set
      if @api_client.config.client_side_validation && app_key.nil?
        fail ArgumentError, "Missing the required parameter 'app_key' when calling UserApi.user_reset_email"
      end
      # resource path
      local_var_path = '/User/{appKey}/ResetEmail'.sub('{' + 'appKey' + '}', CGI.escape(app_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'app_user_reset_email_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'BooleanApiResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"UserApi.user_reset_email",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_reset_email\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 重置手机号
    # 通过手机号验证码重置手机号
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [AppUserResetPhoneRequest] :app_user_reset_phone_request 重置手机号的请求参数
    # @return [BooleanApiResponse]
    def user_reset_phone(app_key, opts = {})
      data, _status_code, _headers = user_reset_phone_with_http_info(app_key, opts)
      data
    end

    # 重置手机号
    # 通过手机号验证码重置手机号
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [AppUserResetPhoneRequest] :app_user_reset_phone_request 重置手机号的请求参数
    # @return [Array<(BooleanApiResponse, Integer, Hash)>] BooleanApiResponse data, response status code and response headers
    def user_reset_phone_with_http_info(app_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_reset_phone ...'
      end
      # verify the required parameter 'app_key' is set
      if @api_client.config.client_side_validation && app_key.nil?
        fail ArgumentError, "Missing the required parameter 'app_key' when calling UserApi.user_reset_phone"
      end
      # resource path
      local_var_path = '/User/{appKey}/ResetPhone'.sub('{' + 'appKey' + '}', CGI.escape(app_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'app_user_reset_phone_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'BooleanApiResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"UserApi.user_reset_phone",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_reset_phone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 重置密码
    # 通过手机号或邮箱重置密码
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [AppUserResetPwdRequest] :app_user_reset_pwd_request 重置密码的请求参数
    # @return [BooleanApiResponse]
    def user_reset_pwd(app_key, opts = {})
      data, _status_code, _headers = user_reset_pwd_with_http_info(app_key, opts)
      data
    end

    # 重置密码
    # 通过手机号或邮箱重置密码
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [AppUserResetPwdRequest] :app_user_reset_pwd_request 重置密码的请求参数
    # @return [Array<(BooleanApiResponse, Integer, Hash)>] BooleanApiResponse data, response status code and response headers
    def user_reset_pwd_with_http_info(app_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_reset_pwd ...'
      end
      # verify the required parameter 'app_key' is set
      if @api_client.config.client_side_validation && app_key.nil?
        fail ArgumentError, "Missing the required parameter 'app_key' when calling UserApi.user_reset_pwd"
      end
      # resource path
      local_var_path = '/User/{appKey}/ResetPwd'.sub('{' + 'appKey' + '}', CGI.escape(app_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'app_user_reset_pwd_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'BooleanApiResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"UserApi.user_reset_pwd",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_reset_pwd\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 发送邮箱验证码
    # 发送邮箱验证码用于注册或找回密码
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [SendEmailCodeRequest] :send_email_code_request 发送邮箱验证码的请求参数
    # @return [BooleanApiResponse]
    def user_send_email_code(app_key, opts = {})
      data, _status_code, _headers = user_send_email_code_with_http_info(app_key, opts)
      data
    end

    # 发送邮箱验证码
    # 发送邮箱验证码用于注册或找回密码
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [SendEmailCodeRequest] :send_email_code_request 发送邮箱验证码的请求参数
    # @return [Array<(BooleanApiResponse, Integer, Hash)>] BooleanApiResponse data, response status code and response headers
    def user_send_email_code_with_http_info(app_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_send_email_code ...'
      end
      # verify the required parameter 'app_key' is set
      if @api_client.config.client_side_validation && app_key.nil?
        fail ArgumentError, "Missing the required parameter 'app_key' when calling UserApi.user_send_email_code"
      end
      # resource path
      local_var_path = '/User/{appKey}/SendEmailCode'.sub('{' + 'appKey' + '}', CGI.escape(app_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'send_email_code_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'BooleanApiResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"UserApi.user_send_email_code",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_send_email_code\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 发送手机验证码
    # 发送手机验证码用于注册或找回密码
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [SendSMSCodeRequest] :send_sms_code_request 发送手机验证码的请求参数
    # @return [BooleanApiResponse]
    def user_send_sms_code(app_key, opts = {})
      data, _status_code, _headers = user_send_sms_code_with_http_info(app_key, opts)
      data
    end

    # 发送手机验证码
    # 发送手机验证码用于注册或找回密码
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [SendSMSCodeRequest] :send_sms_code_request 发送手机验证码的请求参数
    # @return [Array<(BooleanApiResponse, Integer, Hash)>] BooleanApiResponse data, response status code and response headers
    def user_send_sms_code_with_http_info(app_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_send_sms_code ...'
      end
      # verify the required parameter 'app_key' is set
      if @api_client.config.client_side_validation && app_key.nil?
        fail ArgumentError, "Missing the required parameter 'app_key' when calling UserApi.user_send_sms_code"
      end
      # resource path
      local_var_path = '/User/{appKey}/SendSMSCode'.sub('{' + 'appKey' + '}', CGI.escape(app_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'send_sms_code_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'BooleanApiResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"UserApi.user_send_sms_code",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_send_sms_code\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 密码登录
    # 使用账号密码进行登录
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [SignInRequest] :sign_in_request 登录请求参数
    # @return [TokenModelApiResponse]
    def user_sign_in(app_key, opts = {})
      data, _status_code, _headers = user_sign_in_with_http_info(app_key, opts)
      data
    end

    # 密码登录
    # 使用账号密码进行登录
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [SignInRequest] :sign_in_request 登录请求参数
    # @return [Array<(TokenModelApiResponse, Integer, Hash)>] TokenModelApiResponse data, response status code and response headers
    def user_sign_in_with_http_info(app_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_sign_in ...'
      end
      # verify the required parameter 'app_key' is set
      if @api_client.config.client_side_validation && app_key.nil?
        fail ArgumentError, "Missing the required parameter 'app_key' when calling UserApi.user_sign_in"
      end
      # resource path
      local_var_path = '/User/{appKey}/SignIn'.sub('{' + 'appKey' + '}', CGI.escape(app_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'sign_in_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'TokenModelApiResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"UserApi.user_sign_in",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_sign_in\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 账号注册
    # 使用账号密码进行注册
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [SignUpRequest] :sign_up_request 注册请求参数
    # @return [TokenModelApiResponse]
    def user_sign_up(app_key, opts = {})
      data, _status_code, _headers = user_sign_up_with_http_info(app_key, opts)
      data
    end

    # 账号注册
    # 使用账号密码进行注册
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [SignUpRequest] :sign_up_request 注册请求参数
    # @return [Array<(TokenModelApiResponse, Integer, Hash)>] TokenModelApiResponse data, response status code and response headers
    def user_sign_up_with_http_info(app_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_sign_up ...'
      end
      # verify the required parameter 'app_key' is set
      if @api_client.config.client_side_validation && app_key.nil?
        fail ArgumentError, "Missing the required parameter 'app_key' when calling UserApi.user_sign_up"
      end
      # resource path
      local_var_path = '/User/{appKey}/SignUp'.sub('{' + 'appKey' + '}', CGI.escape(app_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'sign_up_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'TokenModelApiResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"UserApi.user_sign_up",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_sign_up\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 二次验证
    # 获取当前用户在指定应用下启用二次验证（2FA）所需的设置信息，主要包括二维码链接和手动密钥，用户可以将其录入在 Google Authenticator 等 TOTP 应用中，用于后续动态验证码验证。
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @return [SetupCodeApiResponse]
    def user_two_factor_auth(app_key, opts = {})
      data, _status_code, _headers = user_two_factor_auth_with_http_info(app_key, opts)
      data
    end

    # 二次验证
    # 获取当前用户在指定应用下启用二次验证（2FA）所需的设置信息，主要包括二维码链接和手动密钥，用户可以将其录入在 Google Authenticator 等 TOTP 应用中，用于后续动态验证码验证。
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SetupCodeApiResponse, Integer, Hash)>] SetupCodeApiResponse data, response status code and response headers
    def user_two_factor_auth_with_http_info(app_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_two_factor_auth ...'
      end
      # verify the required parameter 'app_key' is set
      if @api_client.config.client_side_validation && app_key.nil?
        fail ArgumentError, "Missing the required parameter 'app_key' when calling UserApi.user_two_factor_auth"
      end
      # resource path
      local_var_path = '/User/{appKey}/TwoFactorAuth'.sub('{' + 'appKey' + '}', CGI.escape(app_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SetupCodeApiResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"UserApi.user_two_factor_auth",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_two_factor_auth\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # UnionID登录
    # 使用UnionID进行登录
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [UnionIDSignInRequest] :union_id_sign_in_request 登录请求参数
    # @return [TokenModelApiResponse]
    def user_union_id_sign_in(app_key, opts = {})
      data, _status_code, _headers = user_union_id_sign_in_with_http_info(app_key, opts)
      data
    end

    # UnionID登录
    # 使用UnionID进行登录
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [UnionIDSignInRequest] :union_id_sign_in_request 登录请求参数
    # @return [Array<(TokenModelApiResponse, Integer, Hash)>] TokenModelApiResponse data, response status code and response headers
    def user_union_id_sign_in_with_http_info(app_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_union_id_sign_in ...'
      end
      # verify the required parameter 'app_key' is set
      if @api_client.config.client_side_validation && app_key.nil?
        fail ArgumentError, "Missing the required parameter 'app_key' when calling UserApi.user_union_id_sign_in"
      end
      # resource path
      local_var_path = '/User/{appKey}/UnionIDSignIn'.sub('{' + 'appKey' + '}', CGI.escape(app_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'union_id_sign_in_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'TokenModelApiResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"UserApi.user_union_id_sign_in",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_union_id_sign_in\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # UnionID注册
    # 使用UnionID进行注册
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [UnionIDSignUpRequest] :union_id_sign_up_request 注册请求参数
    # @return [TokenModelApiResponse]
    def user_union_id_sign_up(app_key, opts = {})
      data, _status_code, _headers = user_union_id_sign_up_with_http_info(app_key, opts)
      data
    end

    # UnionID注册
    # 使用UnionID进行注册
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [UnionIDSignUpRequest] :union_id_sign_up_request 注册请求参数
    # @return [Array<(TokenModelApiResponse, Integer, Hash)>] TokenModelApiResponse data, response status code and response headers
    def user_union_id_sign_up_with_http_info(app_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_union_id_sign_up ...'
      end
      # verify the required parameter 'app_key' is set
      if @api_client.config.client_side_validation && app_key.nil?
        fail ArgumentError, "Missing the required parameter 'app_key' when calling UserApi.user_union_id_sign_up"
      end
      # resource path
      local_var_path = '/User/{appKey}/UnionIDSignUp'.sub('{' + 'appKey' + '}', CGI.escape(app_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'union_id_sign_up_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'TokenModelApiResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"UserApi.user_union_id_sign_up",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_union_id_sign_up\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 更新个人资料
    # 更新当前用户的个人资料
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateProfileRequest] :update_profile_request 更新个人资料的请求参数
    # @return [BooleanApiResponse]
    def user_update_profile(app_key, opts = {})
      data, _status_code, _headers = user_update_profile_with_http_info(app_key, opts)
      data
    end

    # 更新个人资料
    # 更新当前用户的个人资料
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateProfileRequest] :update_profile_request 更新个人资料的请求参数
    # @return [Array<(BooleanApiResponse, Integer, Hash)>] BooleanApiResponse data, response status code and response headers
    def user_update_profile_with_http_info(app_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserApi.user_update_profile ...'
      end
      # verify the required parameter 'app_key' is set
      if @api_client.config.client_side_validation && app_key.nil?
        fail ArgumentError, "Missing the required parameter 'app_key' when calling UserApi.user_update_profile"
      end
      # resource path
      local_var_path = '/User/{appKey}/Profile'.sub('{' + 'appKey' + '}', CGI.escape(app_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'update_profile_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'BooleanApiResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"UserApi.user_update_profile",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserApi#user_update_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
