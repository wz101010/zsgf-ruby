=begin
#用户全部 API 文档

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.13.0-SNAPSHOT

=end

require 'cgi'

module ZSGFClient
  class WechatApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # 确认二维码登录请求
    # 微信小程序用户确认二维码登录并获取访问令牌
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [QRCodeSignInRequest] :qr_code_sign_in_request 登录确认请求参数
    # @return [TokenModelApiResponse]
    def confirm_qr_code_login(app_key, opts = {})
      data, _status_code, _headers = confirm_qr_code_login_with_http_info(app_key, opts)
      data
    end

    # 确认二维码登录请求
    # 微信小程序用户确认二维码登录并获取访问令牌
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [QRCodeSignInRequest] :qr_code_sign_in_request 登录确认请求参数
    # @return [Array<(TokenModelApiResponse, Integer, Hash)>] TokenModelApiResponse data, response status code and response headers
    def confirm_qr_code_login_with_http_info(app_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WechatApi.confirm_qr_code_login ...'
      end
      # verify the required parameter 'app_key' is set
      if @api_client.config.client_side_validation && app_key.nil?
        fail ArgumentError, "Missing the required parameter 'app_key' when calling WechatApi.confirm_qr_code_login"
      end
      # resource path
      local_var_path = '/Wechat/{appKey}/QR-Auth/Confirm-Login'.sub('{' + 'appKey' + '}', CGI.escape(app_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'qr_code_sign_in_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'TokenModelApiResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"WechatApi.confirm_qr_code_login",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WechatApi#confirm_qr_code_login\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 确认二维码注册请求
    # 微信小程序用户通过二维码完成注册并获取访问令牌
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [QRCodeSignUpRequest] :qr_code_sign_up_request 注册确认请求参数
    # @return [TokenModelApiResponse]
    def confirm_qr_code_registration(app_key, opts = {})
      data, _status_code, _headers = confirm_qr_code_registration_with_http_info(app_key, opts)
      data
    end

    # 确认二维码注册请求
    # 微信小程序用户通过二维码完成注册并获取访问令牌
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [QRCodeSignUpRequest] :qr_code_sign_up_request 注册确认请求参数
    # @return [Array<(TokenModelApiResponse, Integer, Hash)>] TokenModelApiResponse data, response status code and response headers
    def confirm_qr_code_registration_with_http_info(app_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WechatApi.confirm_qr_code_registration ...'
      end
      # verify the required parameter 'app_key' is set
      if @api_client.config.client_side_validation && app_key.nil?
        fail ArgumentError, "Missing the required parameter 'app_key' when calling WechatApi.confirm_qr_code_registration"
      end
      # resource path
      local_var_path = '/Wechat/{appKey}/QR-Auth/Confirm-Register'.sub('{' + 'appKey' + '}', CGI.escape(app_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'qr_code_sign_up_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'TokenModelApiResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"WechatApi.confirm_qr_code_registration",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WechatApi#confirm_qr_code_registration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 初始化二维码认证会话
    # 创建用于微信小程序扫码登录/注册的认证会话
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [QRCodePreSignInRequest] :qr_code_pre_sign_in_request 认证会话初始化请求参数
    # @return [Int64ApiResponse]
    def initiate_qr_auth_session(app_key, opts = {})
      data, _status_code, _headers = initiate_qr_auth_session_with_http_info(app_key, opts)
      data
    end

    # 初始化二维码认证会话
    # 创建用于微信小程序扫码登录/注册的认证会话
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [QRCodePreSignInRequest] :qr_code_pre_sign_in_request 认证会话初始化请求参数
    # @return [Array<(Int64ApiResponse, Integer, Hash)>] Int64ApiResponse data, response status code and response headers
    def initiate_qr_auth_session_with_http_info(app_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WechatApi.initiate_qr_auth_session ...'
      end
      # verify the required parameter 'app_key' is set
      if @api_client.config.client_side_validation && app_key.nil?
        fail ArgumentError, "Missing the required parameter 'app_key' when calling WechatApi.initiate_qr_auth_session"
      end
      # resource path
      local_var_path = '/Wechat/{appKey}/QR-Auth/Initiate'.sub('{' + 'appKey' + '}', CGI.escape(app_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'qr_code_pre_sign_in_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'Int64ApiResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"WechatApi.initiate_qr_auth_session",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WechatApi#initiate_qr_auth_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 验证二维码扫描结果
    # 微信小程序扫描二维码并获取应用授权信息
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [QRCodeScanRequest] :qr_code_scan_request 二维码扫描请求参数
    # @return [UserQRCodeScanResultApiResponse]
    def scan_qr_code_for_auth(app_key, opts = {})
      data, _status_code, _headers = scan_qr_code_for_auth_with_http_info(app_key, opts)
      data
    end

    # 验证二维码扫描结果
    # 微信小程序扫描二维码并获取应用授权信息
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [QRCodeScanRequest] :qr_code_scan_request 二维码扫描请求参数
    # @return [Array<(UserQRCodeScanResultApiResponse, Integer, Hash)>] UserQRCodeScanResultApiResponse data, response status code and response headers
    def scan_qr_code_for_auth_with_http_info(app_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WechatApi.scan_qr_code_for_auth ...'
      end
      # verify the required parameter 'app_key' is set
      if @api_client.config.client_side_validation && app_key.nil?
        fail ArgumentError, "Missing the required parameter 'app_key' when calling WechatApi.scan_qr_code_for_auth"
      end
      # resource path
      local_var_path = '/Wechat/{appKey}/QR-Auth/Scan'.sub('{' + 'appKey' + '}', CGI.escape(app_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'qr_code_scan_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'UserQRCodeScanResultApiResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"WechatApi.scan_qr_code_for_auth",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WechatApi#scan_qr_code_for_auth\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 解密小程序用户数据
    # 解密小程序加密数据
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :encrypted_data 加密的数据
    # @option opts [String] :iv 加密算法的初始向量
    # @option opts [String] :session_key 会话密钥
    # @return [StringApiResponse]
    def wechat_decrypt(app_key, opts = {})
      data, _status_code, _headers = wechat_decrypt_with_http_info(app_key, opts)
      data
    end

    # 解密小程序用户数据
    # 解密小程序加密数据
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :encrypted_data 加密的数据
    # @option opts [String] :iv 加密算法的初始向量
    # @option opts [String] :session_key 会话密钥
    # @return [Array<(StringApiResponse, Integer, Hash)>] StringApiResponse data, response status code and response headers
    def wechat_decrypt_with_http_info(app_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WechatApi.wechat_decrypt ...'
      end
      # verify the required parameter 'app_key' is set
      if @api_client.config.client_side_validation && app_key.nil?
        fail ArgumentError, "Missing the required parameter 'app_key' when calling WechatApi.wechat_decrypt"
      end
      # resource path
      local_var_path = '/Wechat/{appKey}/Decrypt'.sub('{' + 'appKey' + '}', CGI.escape(app_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'encryptedData'] = opts[:'encrypted_data'] if !opts[:'encrypted_data'].nil?
      query_params[:'iv'] = opts[:'iv'] if !opts[:'iv'].nil?
      query_params[:'sessionKey'] = opts[:'session_key'] if !opts[:'session_key'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'StringApiResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"WechatApi.wechat_decrypt",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WechatApi#wechat_decrypt\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 生成小程序Scheme码
    # 生成小程序的scheme码
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Object>] :request_body scheme码数据，开发参考：https://developers.weixin.qq.com/miniprogram/dev/OpenApiDoc/qrcode-link/url-scheme/generateScheme.html
    # @return [StringApiResponse]
    def wechat_generate_scheme(app_key, opts = {})
      data, _status_code, _headers = wechat_generate_scheme_with_http_info(app_key, opts)
      data
    end

    # 生成小程序Scheme码
    # 生成小程序的scheme码
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Object>] :request_body scheme码数据，开发参考：https://developers.weixin.qq.com/miniprogram/dev/OpenApiDoc/qrcode-link/url-scheme/generateScheme.html
    # @return [Array<(StringApiResponse, Integer, Hash)>] StringApiResponse data, response status code and response headers
    def wechat_generate_scheme_with_http_info(app_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WechatApi.wechat_generate_scheme ...'
      end
      # verify the required parameter 'app_key' is set
      if @api_client.config.client_side_validation && app_key.nil?
        fail ArgumentError, "Missing the required parameter 'app_key' when calling WechatApi.wechat_generate_scheme"
      end
      # resource path
      local_var_path = '/Wechat/{appKey}/GenerateScheme'.sub('{' + 'appKey' + '}', CGI.escape(app_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'request_body'])

      # return_type
      return_type = opts[:debug_return_type] || 'StringApiResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"WechatApi.wechat_generate_scheme",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WechatApi#wechat_generate_scheme\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 校验小程序登录状态
    # 校验小程序登录凭证
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :js_code 登录凭证，开发参考：https://dwz.cn/icNajFh7
    # @return [StringApiResponse]
    def wechat_js_code2_session(app_key, opts = {})
      data, _status_code, _headers = wechat_js_code2_session_with_http_info(app_key, opts)
      data
    end

    # 校验小程序登录状态
    # 校验小程序登录凭证
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :js_code 登录凭证，开发参考：https://dwz.cn/icNajFh7
    # @return [Array<(StringApiResponse, Integer, Hash)>] StringApiResponse data, response status code and response headers
    def wechat_js_code2_session_with_http_info(app_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WechatApi.wechat_js_code2_session ...'
      end
      # verify the required parameter 'app_key' is set
      if @api_client.config.client_side_validation && app_key.nil?
        fail ArgumentError, "Missing the required parameter 'app_key' when calling WechatApi.wechat_js_code2_session"
      end
      # resource path
      local_var_path = '/Wechat/{appKey}/JSCode2Session'.sub('{' + 'appKey' + '}', CGI.escape(app_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'js_code'] = opts[:'js_code'] if !opts[:'js_code'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'StringApiResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"WechatApi.wechat_js_code2_session",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WechatApi#wechat_js_code2_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 配置公众号JS SDK
    # 获取公众号H5的JS SDK配置
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :url 当前网页的URL
    # @return [WechatJSConfigResultApiResponse]
    def wechat_js_config(app_key, opts = {})
      data, _status_code, _headers = wechat_js_config_with_http_info(app_key, opts)
      data
    end

    # 配置公众号JS SDK
    # 获取公众号H5的JS SDK配置
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :url 当前网页的URL
    # @return [Array<(WechatJSConfigResultApiResponse, Integer, Hash)>] WechatJSConfigResultApiResponse data, response status code and response headers
    def wechat_js_config_with_http_info(app_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WechatApi.wechat_js_config ...'
      end
      # verify the required parameter 'app_key' is set
      if @api_client.config.client_side_validation && app_key.nil?
        fail ArgumentError, "Missing the required parameter 'app_key' when calling WechatApi.wechat_js_config"
      end
      # resource path
      local_var_path = '/Wechat/{appKey}/JSConfig'.sub('{' + 'appKey' + '}', CGI.escape(app_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'url'] = opts[:'url'] if !opts[:'url'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'WechatJSConfigResultApiResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"WechatApi.wechat_js_config",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WechatApi#wechat_js_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 小程序内容安全检测
    # 检测消息内容是否含有违法违规信息
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Object>] :request_body 消息内容数据，开发参考：https://developers.weixin.qq.com/miniprogram/dev/OpenApiDoc/sec-center/sec-check/msgSecCheck.html
    # @return [Object]
    def wechat_msg_sec_check(app_key, opts = {})
      data, _status_code, _headers = wechat_msg_sec_check_with_http_info(app_key, opts)
      data
    end

    # 小程序内容安全检测
    # 检测消息内容是否含有违法违规信息
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Object>] :request_body 消息内容数据，开发参考：https://developers.weixin.qq.com/miniprogram/dev/OpenApiDoc/sec-center/sec-check/msgSecCheck.html
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def wechat_msg_sec_check_with_http_info(app_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WechatApi.wechat_msg_sec_check ...'
      end
      # verify the required parameter 'app_key' is set
      if @api_client.config.client_side_validation && app_key.nil?
        fail ArgumentError, "Missing the required parameter 'app_key' when calling WechatApi.wechat_msg_sec_check"
      end
      # resource path
      local_var_path = '/Wechat/{appKey}/MsgSecCheck'.sub('{' + 'appKey' + '}', CGI.escape(app_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'request_body'])

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"WechatApi.wechat_msg_sec_check",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WechatApi#wechat_msg_sec_check\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 发送公众号一次性订阅消息
    # 发送公众号H5一次性订阅消息
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Object>] :request_body 订阅消息数据，开发参考：https://dwz.cn/IXptek5n
    # @return [StringApiResponse]
    def wechat_subscribe_msg(app_key, opts = {})
      data, _status_code, _headers = wechat_subscribe_msg_with_http_info(app_key, opts)
      data
    end

    # 发送公众号一次性订阅消息
    # 发送公众号H5一次性订阅消息
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Object>] :request_body 订阅消息数据，开发参考：https://dwz.cn/IXptek5n
    # @return [Array<(StringApiResponse, Integer, Hash)>] StringApiResponse data, response status code and response headers
    def wechat_subscribe_msg_with_http_info(app_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WechatApi.wechat_subscribe_msg ...'
      end
      # verify the required parameter 'app_key' is set
      if @api_client.config.client_side_validation && app_key.nil?
        fail ArgumentError, "Missing the required parameter 'app_key' when calling WechatApi.wechat_subscribe_msg"
      end
      # resource path
      local_var_path = '/Wechat/{appKey}/SubscribeMSG'.sub('{' + 'appKey' + '}', CGI.escape(app_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'request_body'])

      # return_type
      return_type = opts[:debug_return_type] || 'StringApiResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"WechatApi.wechat_subscribe_msg",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WechatApi#wechat_subscribe_msg\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 发送小程序订阅消息
    # 发送小程序订阅消息
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Object>] :request_body 订阅消息数据，开发参考：https://dwz.cn/bohXaCnp
    # @return [StringApiResponse]
    def wechat_subscribe_send(app_key, opts = {})
      data, _status_code, _headers = wechat_subscribe_send_with_http_info(app_key, opts)
      data
    end

    # 发送小程序订阅消息
    # 发送小程序订阅消息
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Object>] :request_body 订阅消息数据，开发参考：https://dwz.cn/bohXaCnp
    # @return [Array<(StringApiResponse, Integer, Hash)>] StringApiResponse data, response status code and response headers
    def wechat_subscribe_send_with_http_info(app_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WechatApi.wechat_subscribe_send ...'
      end
      # verify the required parameter 'app_key' is set
      if @api_client.config.client_side_validation && app_key.nil?
        fail ArgumentError, "Missing the required parameter 'app_key' when calling WechatApi.wechat_subscribe_send"
      end
      # resource path
      local_var_path = '/Wechat/{appKey}/SubscribeSend'.sub('{' + 'appKey' + '}', CGI.escape(app_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'request_body'])

      # return_type
      return_type = opts[:debug_return_type] || 'StringApiResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"WechatApi.wechat_subscribe_send",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WechatApi#wechat_subscribe_send\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 生成小程序URL跳转链接
    # 生成小程序的网页跳转地址
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Object>] :request_body 跳转地址数据，开发参考：https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/url-link/urllink.generate.html
    # @return [StringApiResponse]
    def wechat_url_link_generate(app_key, opts = {})
      data, _status_code, _headers = wechat_url_link_generate_with_http_info(app_key, opts)
      data
    end

    # 生成小程序URL跳转链接
    # 生成小程序的网页跳转地址
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Object>] :request_body 跳转地址数据，开发参考：https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/url-link/urllink.generate.html
    # @return [Array<(StringApiResponse, Integer, Hash)>] StringApiResponse data, response status code and response headers
    def wechat_url_link_generate_with_http_info(app_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WechatApi.wechat_url_link_generate ...'
      end
      # verify the required parameter 'app_key' is set
      if @api_client.config.client_side_validation && app_key.nil?
        fail ArgumentError, "Missing the required parameter 'app_key' when calling WechatApi.wechat_url_link_generate"
      end
      # resource path
      local_var_path = '/Wechat/{appKey}/UrlLinkGenerate'.sub('{' + 'appKey' + '}', CGI.escape(app_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'request_body'])

      # return_type
      return_type = opts[:debug_return_type] || 'StringApiResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"WechatApi.wechat_url_link_generate",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WechatApi#wechat_url_link_generate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 获取公众号H5 UnionID
    # 获取公众号H5用户的UnionID
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :openid 用户的OpenID
    # @return [StringApiResponse]
    def wechat_user_info(app_key, opts = {})
      data, _status_code, _headers = wechat_user_info_with_http_info(app_key, opts)
      data
    end

    # 获取公众号H5 UnionID
    # 获取公众号H5用户的UnionID
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :openid 用户的OpenID
    # @return [Array<(StringApiResponse, Integer, Hash)>] StringApiResponse data, response status code and response headers
    def wechat_user_info_with_http_info(app_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WechatApi.wechat_user_info ...'
      end
      # verify the required parameter 'app_key' is set
      if @api_client.config.client_side_validation && app_key.nil?
        fail ArgumentError, "Missing the required parameter 'app_key' when calling WechatApi.wechat_user_info"
      end
      # resource path
      local_var_path = '/Wechat/{appKey}/UserInfo'.sub('{' + 'appKey' + '}', CGI.escape(app_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'openid'] = opts[:'openid'] if !opts[:'openid'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'StringApiResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"WechatApi.wechat_user_info",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WechatApi#wechat_user_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 获取小程序码（普通）
    # 获取小程序码
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Object>] :request_body 小程序码数据，开发参考：https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/qr-code/wxacode.get.html
    # @return [File]
    def wechat_wxa_code_get(app_key, opts = {})
      data, _status_code, _headers = wechat_wxa_code_get_with_http_info(app_key, opts)
      data
    end

    # 获取小程序码（普通）
    # 获取小程序码
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Object>] :request_body 小程序码数据，开发参考：https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/qr-code/wxacode.get.html
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def wechat_wxa_code_get_with_http_info(app_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WechatApi.wechat_wxa_code_get ...'
      end
      # verify the required parameter 'app_key' is set
      if @api_client.config.client_side_validation && app_key.nil?
        fail ArgumentError, "Missing the required parameter 'app_key' when calling WechatApi.wechat_wxa_code_get"
      end
      # resource path
      local_var_path = '/Wechat/{appKey}/WXACodeGet'.sub('{' + 'appKey' + '}', CGI.escape(app_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['image/jpeg']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'request_body'])

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"WechatApi.wechat_wxa_code_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WechatApi#wechat_wxa_code_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 获取小程序码（无限制）
    # 获取无限制的小程序码
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Object>] :request_body 小程序码数据，开发参考：https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/qr-code/wxacode.getUnlimited.html
    # @return [File]
    def wechat_wxa_code_get_unlimited(app_key, opts = {})
      data, _status_code, _headers = wechat_wxa_code_get_unlimited_with_http_info(app_key, opts)
      data
    end

    # 获取小程序码（无限制）
    # 获取无限制的小程序码
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Object>] :request_body 小程序码数据，开发参考：https://developers.weixin.qq.com/miniprogram/dev/api-backend/open-api/qr-code/wxacode.getUnlimited.html
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def wechat_wxa_code_get_unlimited_with_http_info(app_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WechatApi.wechat_wxa_code_get_unlimited ...'
      end
      # verify the required parameter 'app_key' is set
      if @api_client.config.client_side_validation && app_key.nil?
        fail ArgumentError, "Missing the required parameter 'app_key' when calling WechatApi.wechat_wxa_code_get_unlimited"
      end
      # resource path
      local_var_path = '/Wechat/{appKey}/WXACodeGetUnlimited'.sub('{' + 'appKey' + '}', CGI.escape(app_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['image/jpeg']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'request_body'])

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"WechatApi.wechat_wxa_code_get_unlimited",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WechatApi#wechat_wxa_code_get_unlimited\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
