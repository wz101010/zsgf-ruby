=begin
#用户全部 API 文档

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.13.0-SNAPSHOT

=end

require 'cgi'

module ZSGFClient
  class OAuthApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # 获取访问令牌
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :scheme 身份源
    # @option opts [String] :code 授权码
    # @return [AuthorizeResultApiResponse]
    def o_auth_authorize(app_key, opts = {})
      data, _status_code, _headers = o_auth_authorize_with_http_info(app_key, opts)
      data
    end

    # 获取访问令牌
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :scheme 身份源
    # @option opts [String] :code 授权码
    # @return [Array<(AuthorizeResultApiResponse, Integer, Hash)>] AuthorizeResultApiResponse data, response status code and response headers
    def o_auth_authorize_with_http_info(app_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OAuthApi.o_auth_authorize ...'
      end
      # verify the required parameter 'app_key' is set
      if @api_client.config.client_side_validation && app_key.nil?
        fail ArgumentError, "Missing the required parameter 'app_key' when calling OAuthApi.o_auth_authorize"
      end
      # resource path
      local_var_path = '/OAuth/{appKey}/Authorize'.sub('{' + 'appKey' + '}', CGI.escape(app_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'scheme'] = opts[:'scheme'] if !opts[:'scheme'].nil?
      query_params[:'code'] = opts[:'code'] if !opts[:'code'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AuthorizeResultApiResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"OAuthApi.o_auth_authorize",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OAuthApi#o_auth_authorize\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 获取授权记录
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @return [AppUserConsentModelListApiResponse]
    def o_auth_consents(app_key, opts = {})
      data, _status_code, _headers = o_auth_consents_with_http_info(app_key, opts)
      data
    end

    # 获取授权记录
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AppUserConsentModelListApiResponse, Integer, Hash)>] AppUserConsentModelListApiResponse data, response status code and response headers
    def o_auth_consents_with_http_info(app_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OAuthApi.o_auth_consents ...'
      end
      # verify the required parameter 'app_key' is set
      if @api_client.config.client_side_validation && app_key.nil?
        fail ArgumentError, "Missing the required parameter 'app_key' when calling OAuthApi.o_auth_consents"
      end
      # resource path
      local_var_path = '/OAuth/{appKey}/Consents'.sub('{' + 'appKey' + '}', CGI.escape(app_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AppUserConsentModelListApiResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"OAuthApi.o_auth_consents",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OAuthApi#o_auth_consents\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 删除授权记录
    # @param id [Integer] 
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @return [BooleanApiResponse]
    def o_auth_delete_consent(id, app_key, opts = {})
      data, _status_code, _headers = o_auth_delete_consent_with_http_info(id, app_key, opts)
      data
    end

    # 删除授权记录
    # @param id [Integer] 
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BooleanApiResponse, Integer, Hash)>] BooleanApiResponse data, response status code and response headers
    def o_auth_delete_consent_with_http_info(id, app_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OAuthApi.o_auth_delete_consent ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling OAuthApi.o_auth_delete_consent"
      end
      # verify the required parameter 'app_key' is set
      if @api_client.config.client_side_validation && app_key.nil?
        fail ArgumentError, "Missing the required parameter 'app_key' when calling OAuthApi.o_auth_delete_consent"
      end
      # resource path
      local_var_path = '/OAuth/{appKey}/Consents/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'appKey' + '}', CGI.escape(app_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BooleanApiResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"OAuthApi.o_auth_delete_consent",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OAuthApi#o_auth_delete_consent\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 获取授权码
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :scheme 身份源，固定填：app
    # @option opts [GrantRequest] :grant_request 授权详情
    # @return [GrantResultApiResponse]
    def o_auth_grant_code(app_key, opts = {})
      data, _status_code, _headers = o_auth_grant_code_with_http_info(app_key, opts)
      data
    end

    # 获取授权码
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :scheme 身份源，固定填：app
    # @option opts [GrantRequest] :grant_request 授权详情
    # @return [Array<(GrantResultApiResponse, Integer, Hash)>] GrantResultApiResponse data, response status code and response headers
    def o_auth_grant_code_with_http_info(app_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OAuthApi.o_auth_grant_code ...'
      end
      # verify the required parameter 'app_key' is set
      if @api_client.config.client_side_validation && app_key.nil?
        fail ArgumentError, "Missing the required parameter 'app_key' when calling OAuthApi.o_auth_grant_code"
      end
      # resource path
      local_var_path = '/OAuth/{appKey}/GrantCode'.sub('{' + 'appKey' + '}', CGI.escape(app_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'scheme'] = opts[:'scheme'] if !opts[:'scheme'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'grant_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'GrantResultApiResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"OAuthApi.o_auth_grant_code",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OAuthApi#o_auth_grant_code\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 获取用户资料
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @return [ProfileResultApiResponse]
    def o_auth_profile(app_key, opts = {})
      data, _status_code, _headers = o_auth_profile_with_http_info(app_key, opts)
      data
    end

    # 获取用户资料
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProfileResultApiResponse, Integer, Hash)>] ProfileResultApiResponse data, response status code and response headers
    def o_auth_profile_with_http_info(app_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OAuthApi.o_auth_profile ...'
      end
      # verify the required parameter 'app_key' is set
      if @api_client.config.client_side_validation && app_key.nil?
        fail ArgumentError, "Missing the required parameter 'app_key' when calling OAuthApi.o_auth_profile"
      end
      # resource path
      local_var_path = '/OAuth/{appKey}/Profile'.sub('{' + 'appKey' + '}', CGI.escape(app_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ProfileResultApiResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"OAuthApi.o_auth_profile",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OAuthApi#o_auth_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
