=begin
#用户全部 API 文档

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.13.0-SNAPSHOT

=end

require 'cgi'

module ZSGFClient
  class AccessTokenApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # 删除令牌
    # 删除用户令牌
    # @param id [Integer] 
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @return [BooleanApiResponse]
    def access_token_delete(id, app_key, opts = {})
      data, _status_code, _headers = access_token_delete_with_http_info(id, app_key, opts)
      data
    end

    # 删除令牌
    # 删除用户令牌
    # @param id [Integer] 
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BooleanApiResponse, Integer, Hash)>] BooleanApiResponse data, response status code and response headers
    def access_token_delete_with_http_info(id, app_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccessTokenApi.access_token_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AccessTokenApi.access_token_delete"
      end
      # verify the required parameter 'app_key' is set
      if @api_client.config.client_side_validation && app_key.nil?
        fail ArgumentError, "Missing the required parameter 'app_key' when calling AccessTokenApi.access_token_delete"
      end
      # resource path
      local_var_path = '/AccessToken/{appKey}/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'appKey' + '}', CGI.escape(app_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BooleanApiResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"AccessTokenApi.access_token_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccessTokenApi#access_token_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 创建令牌
    # 创建新的用户令牌
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [AccessTokenPostRequest] :access_token_post_request 
    # @return [TokenModelApiResponse]
    def access_token_post(app_key, opts = {})
      data, _status_code, _headers = access_token_post_with_http_info(app_key, opts)
      data
    end

    # 创建令牌
    # 创建新的用户令牌
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [AccessTokenPostRequest] :access_token_post_request 
    # @return [Array<(TokenModelApiResponse, Integer, Hash)>] TokenModelApiResponse data, response status code and response headers
    def access_token_post_with_http_info(app_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccessTokenApi.access_token_post ...'
      end
      # verify the required parameter 'app_key' is set
      if @api_client.config.client_side_validation && app_key.nil?
        fail ArgumentError, "Missing the required parameter 'app_key' when calling AccessTokenApi.access_token_post"
      end
      # resource path
      local_var_path = '/AccessToken/{appKey}'.sub('{' + 'appKey' + '}', CGI.escape(app_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'access_token_post_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'TokenModelApiResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"AccessTokenApi.access_token_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccessTokenApi#access_token_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 更新令牌
    # 更新现有的用户令牌
    # @param id [Integer] 
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [AccessTokenPutRequest] :access_token_put_request 
    # @return [BooleanApiResponse]
    def access_token_put(id, app_key, opts = {})
      data, _status_code, _headers = access_token_put_with_http_info(id, app_key, opts)
      data
    end

    # 更新令牌
    # 更新现有的用户令牌
    # @param id [Integer] 
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [AccessTokenPutRequest] :access_token_put_request 
    # @return [Array<(BooleanApiResponse, Integer, Hash)>] BooleanApiResponse data, response status code and response headers
    def access_token_put_with_http_info(id, app_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccessTokenApi.access_token_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AccessTokenApi.access_token_put"
      end
      # verify the required parameter 'app_key' is set
      if @api_client.config.client_side_validation && app_key.nil?
        fail ArgumentError, "Missing the required parameter 'app_key' when calling AccessTokenApi.access_token_put"
      end
      # resource path
      local_var_path = '/AccessToken/{appKey}/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'appKey' + '}', CGI.escape(app_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'access_token_put_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'BooleanApiResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"AccessTokenApi.access_token_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccessTokenApi#access_token_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 令牌列表
    # 获取用户令牌列表
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :user_id 
    # @option opts [Integer] :skip 
    # @option opts [Integer] :take 
    # @return [AccessTokenListResultApiResponse]
    def access_tokens(app_key, opts = {})
      data, _status_code, _headers = access_tokens_with_http_info(app_key, opts)
      data
    end

    # 令牌列表
    # 获取用户令牌列表
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :user_id 
    # @option opts [Integer] :skip 
    # @option opts [Integer] :take 
    # @return [Array<(AccessTokenListResultApiResponse, Integer, Hash)>] AccessTokenListResultApiResponse data, response status code and response headers
    def access_tokens_with_http_info(app_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccessTokenApi.access_tokens ...'
      end
      # verify the required parameter 'app_key' is set
      if @api_client.config.client_side_validation && app_key.nil?
        fail ArgumentError, "Missing the required parameter 'app_key' when calling AccessTokenApi.access_tokens"
      end
      # resource path
      local_var_path = '/AccessToken/{appKey}'.sub('{' + 'appKey' + '}', CGI.escape(app_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'userId'] = opts[:'user_id'] if !opts[:'user_id'].nil?
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'take'] = opts[:'take'] if !opts[:'take'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AccessTokenListResultApiResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"AccessTokenApi.access_tokens",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccessTokenApi#access_tokens\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
