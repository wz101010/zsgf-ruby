=begin
#用户全部 API 文档

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.13.0-SNAPSHOT

=end

require 'cgi'

module ZSGFClient
  class FileApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # 创建文件夹
    # 在指定路径创建文件夹
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :path 文件夹路径
    # @return [BooleanApiResponse]
    def file_create_folder(app_key, opts = {})
      data, _status_code, _headers = file_create_folder_with_http_info(app_key, opts)
      data
    end

    # 创建文件夹
    # 在指定路径创建文件夹
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :path 文件夹路径
    # @return [Array<(BooleanApiResponse, Integer, Hash)>] BooleanApiResponse data, response status code and response headers
    def file_create_folder_with_http_info(app_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FileApi.file_create_folder ...'
      end
      # verify the required parameter 'app_key' is set
      if @api_client.config.client_side_validation && app_key.nil?
        fail ArgumentError, "Missing the required parameter 'app_key' when calling FileApi.file_create_folder"
      end
      # resource path
      local_var_path = '/File/{appKey}/CreateFolder'.sub('{' + 'appKey' + '}', CGI.escape(app_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'path'] = opts[:'path'] if !opts[:'path'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BooleanApiResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"FileApi.file_create_folder",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FileApi#file_create_folder\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 删除文件 / 文件夹
    # 根据指定路径删除文件或文件夹
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :path 文件 / 文件夹路径
    # @return [BooleanApiResponse]
    def file_delete(app_key, opts = {})
      data, _status_code, _headers = file_delete_with_http_info(app_key, opts)
      data
    end

    # 删除文件 / 文件夹
    # 根据指定路径删除文件或文件夹
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :path 文件 / 文件夹路径
    # @return [Array<(BooleanApiResponse, Integer, Hash)>] BooleanApiResponse data, response status code and response headers
    def file_delete_with_http_info(app_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FileApi.file_delete ...'
      end
      # verify the required parameter 'app_key' is set
      if @api_client.config.client_side_validation && app_key.nil?
        fail ArgumentError, "Missing the required parameter 'app_key' when calling FileApi.file_delete"
      end
      # resource path
      local_var_path = '/File/{appKey}'.sub('{' + 'appKey' + '}', CGI.escape(app_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'path'] = opts[:'path'] if !opts[:'path'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BooleanApiResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"FileApi.file_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FileApi#file_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 重命名文件 / 文件夹
    # 将指定的文件或文件夹重命名
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source_name 原文件 / 文件夹名称
    # @option opts [String] :dest_name 新文件 / 文件夹名称
    # @return [BooleanApiResponse]
    def file_rename(app_key, opts = {})
      data, _status_code, _headers = file_rename_with_http_info(app_key, opts)
      data
    end

    # 重命名文件 / 文件夹
    # 将指定的文件或文件夹重命名
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :source_name 原文件 / 文件夹名称
    # @option opts [String] :dest_name 新文件 / 文件夹名称
    # @return [Array<(BooleanApiResponse, Integer, Hash)>] BooleanApiResponse data, response status code and response headers
    def file_rename_with_http_info(app_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FileApi.file_rename ...'
      end
      # verify the required parameter 'app_key' is set
      if @api_client.config.client_side_validation && app_key.nil?
        fail ArgumentError, "Missing the required parameter 'app_key' when calling FileApi.file_rename"
      end
      # resource path
      local_var_path = '/File/{appKey}/Rename'.sub('{' + 'appKey' + '}', CGI.escape(app_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sourceName'] = opts[:'source_name'] if !opts[:'source_name'].nil?
      query_params[:'destName'] = opts[:'dest_name'] if !opts[:'dest_name'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BooleanApiResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"FileApi.file_rename",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FileApi#file_rename\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 上传文件
    # 将文件上传到指定路径
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :path 文件夹路径
    # @option opts [File] :file 上传的文件
    # @return [StringApiResponse]
    def file_upload(app_key, opts = {})
      data, _status_code, _headers = file_upload_with_http_info(app_key, opts)
      data
    end

    # 上传文件
    # 将文件上传到指定路径
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :path 文件夹路径
    # @option opts [File] :file 上传的文件
    # @return [Array<(StringApiResponse, Integer, Hash)>] StringApiResponse data, response status code and response headers
    def file_upload_with_http_info(app_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FileApi.file_upload ...'
      end
      # verify the required parameter 'app_key' is set
      if @api_client.config.client_side_validation && app_key.nil?
        fail ArgumentError, "Missing the required parameter 'app_key' when calling FileApi.file_upload"
      end
      # resource path
      local_var_path = '/File/{appKey}/Upload'.sub('{' + 'appKey' + '}', CGI.escape(app_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'path'] = opts[:'path'] if !opts[:'path'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['multipart/form-data'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['file'] = opts[:'file'] if !opts[:'file'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'StringApiResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"FileApi.file_upload",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FileApi#file_upload\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 获取文件列表
    # 根据指定路径获取文件和文件夹列表
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :path 文件路径
    # @option opts [Integer] :skip 跳过的记录数 (default to 0)
    # @option opts [Integer] :take 获取的记录数 (default to 100)
    # @return [FileListResultApiResponse]
    def files(app_key, opts = {})
      data, _status_code, _headers = files_with_http_info(app_key, opts)
      data
    end

    # 获取文件列表
    # 根据指定路径获取文件和文件夹列表
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :path 文件路径
    # @option opts [Integer] :skip 跳过的记录数 (default to 0)
    # @option opts [Integer] :take 获取的记录数 (default to 100)
    # @return [Array<(FileListResultApiResponse, Integer, Hash)>] FileListResultApiResponse data, response status code and response headers
    def files_with_http_info(app_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FileApi.files ...'
      end
      # verify the required parameter 'app_key' is set
      if @api_client.config.client_side_validation && app_key.nil?
        fail ArgumentError, "Missing the required parameter 'app_key' when calling FileApi.files"
      end
      # resource path
      local_var_path = '/File/{appKey}'.sub('{' + 'appKey' + '}', CGI.escape(app_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'path'] = opts[:'path'] if !opts[:'path'].nil?
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'take'] = opts[:'take'] if !opts[:'take'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FileListResultApiResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"FileApi.files",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FileApi#files\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
