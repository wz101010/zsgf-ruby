=begin
#用户全部 API 文档

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.13.0-SNAPSHOT

=end

require 'cgi'

module ZSGFClient
  class UserCurrencyApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # 获取用户资产
    # 根据用户ID获取用户的资产列表
    # @param id [Integer] 用户ID
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @return [UserCurrencyListApiResponse]
    def user_currencies(id, app_key, opts = {})
      data, _status_code, _headers = user_currencies_with_http_info(id, app_key, opts)
      data
    end

    # 获取用户资产
    # 根据用户ID获取用户的资产列表
    # @param id [Integer] 用户ID
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserCurrencyListApiResponse, Integer, Hash)>] UserCurrencyListApiResponse data, response status code and response headers
    def user_currencies_with_http_info(id, app_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserCurrencyApi.user_currencies ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserCurrencyApi.user_currencies"
      end
      # verify the required parameter 'app_key' is set
      if @api_client.config.client_side_validation && app_key.nil?
        fail ArgumentError, "Missing the required parameter 'app_key' when calling UserCurrencyApi.user_currencies"
      end
      # resource path
      local_var_path = '/UserCurrency/{appKey}/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'appKey' + '}', CGI.escape(app_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UserCurrencyListApiResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"UserCurrencyApi.user_currencies",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserCurrencyApi#user_currencies\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 消费虚拟币
    # 根据提供的参数进行虚拟币消费
    # @param nonce [String] 随机数
    # @param timestamp [Integer] 时间戳（允许与服务器时间误差在1分钟内）
    # @param signature [String] 签名
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [CurrencyConsumeRequest] :currency_consume_request 消费请求参数
    # @return [BooleanApiResponse]
    def user_currency_consume(nonce, timestamp, signature, app_key, opts = {})
      data, _status_code, _headers = user_currency_consume_with_http_info(nonce, timestamp, signature, app_key, opts)
      data
    end

    # 消费虚拟币
    # 根据提供的参数进行虚拟币消费
    # @param nonce [String] 随机数
    # @param timestamp [Integer] 时间戳（允许与服务器时间误差在1分钟内）
    # @param signature [String] 签名
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [CurrencyConsumeRequest] :currency_consume_request 消费请求参数
    # @return [Array<(BooleanApiResponse, Integer, Hash)>] BooleanApiResponse data, response status code and response headers
    def user_currency_consume_with_http_info(nonce, timestamp, signature, app_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserCurrencyApi.user_currency_consume ...'
      end
      # verify the required parameter 'nonce' is set
      if @api_client.config.client_side_validation && nonce.nil?
        fail ArgumentError, "Missing the required parameter 'nonce' when calling UserCurrencyApi.user_currency_consume"
      end
      # verify the required parameter 'timestamp' is set
      if @api_client.config.client_side_validation && timestamp.nil?
        fail ArgumentError, "Missing the required parameter 'timestamp' when calling UserCurrencyApi.user_currency_consume"
      end
      # verify the required parameter 'signature' is set
      if @api_client.config.client_side_validation && signature.nil?
        fail ArgumentError, "Missing the required parameter 'signature' when calling UserCurrencyApi.user_currency_consume"
      end
      # verify the required parameter 'app_key' is set
      if @api_client.config.client_side_validation && app_key.nil?
        fail ArgumentError, "Missing the required parameter 'app_key' when calling UserCurrencyApi.user_currency_consume"
      end
      # resource path
      local_var_path = '/UserCurrency/{appKey}/CurrencyConsume'.sub('{' + 'appKey' + '}', CGI.escape(app_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'nonce'] = nonce
      query_params[:'timestamp'] = timestamp
      query_params[:'signature'] = signature

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'currency_consume_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'BooleanApiResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"UserCurrencyApi.user_currency_consume",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserCurrencyApi#user_currency_consume\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 兑换虚拟币
    # 根据提供的参数进行虚拟币兑换
    # @param nonce [String] 随机数
    # @param timestamp [Integer] 时间戳（允许与服务器时间误差在1分钟内）
    # @param signature [String] 签名
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [ExchangeCurrencyRequest] :exchange_currency_request 兑换请求参数
    # @return [BooleanApiResponse]
    def user_currency_exchange(nonce, timestamp, signature, app_key, opts = {})
      data, _status_code, _headers = user_currency_exchange_with_http_info(nonce, timestamp, signature, app_key, opts)
      data
    end

    # 兑换虚拟币
    # 根据提供的参数进行虚拟币兑换
    # @param nonce [String] 随机数
    # @param timestamp [Integer] 时间戳（允许与服务器时间误差在1分钟内）
    # @param signature [String] 签名
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [ExchangeCurrencyRequest] :exchange_currency_request 兑换请求参数
    # @return [Array<(BooleanApiResponse, Integer, Hash)>] BooleanApiResponse data, response status code and response headers
    def user_currency_exchange_with_http_info(nonce, timestamp, signature, app_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserCurrencyApi.user_currency_exchange ...'
      end
      # verify the required parameter 'nonce' is set
      if @api_client.config.client_side_validation && nonce.nil?
        fail ArgumentError, "Missing the required parameter 'nonce' when calling UserCurrencyApi.user_currency_exchange"
      end
      # verify the required parameter 'timestamp' is set
      if @api_client.config.client_side_validation && timestamp.nil?
        fail ArgumentError, "Missing the required parameter 'timestamp' when calling UserCurrencyApi.user_currency_exchange"
      end
      # verify the required parameter 'signature' is set
      if @api_client.config.client_side_validation && signature.nil?
        fail ArgumentError, "Missing the required parameter 'signature' when calling UserCurrencyApi.user_currency_exchange"
      end
      # verify the required parameter 'app_key' is set
      if @api_client.config.client_side_validation && app_key.nil?
        fail ArgumentError, "Missing the required parameter 'app_key' when calling UserCurrencyApi.user_currency_exchange"
      end
      # resource path
      local_var_path = '/UserCurrency/{appKey}/CurrencyExchange'.sub('{' + 'appKey' + '}', CGI.escape(app_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'nonce'] = nonce
      query_params[:'timestamp'] = timestamp
      query_params[:'signature'] = signature

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'exchange_currency_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'BooleanApiResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"UserCurrencyApi.user_currency_exchange",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserCurrencyApi#user_currency_exchange\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 充值虚拟币
    # 根据提供的参数进行虚拟币充值
    # @param nonce [String] 随机数
    # @param timestamp [Integer] 时间戳（允许与服务器时间误差在1分钟内）
    # @param signature [String] 签名
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [RechargePointRequest] :recharge_point_request 充值请求参数
    # @return [BooleanApiResponse]
    def user_currency_recharge(nonce, timestamp, signature, app_key, opts = {})
      data, _status_code, _headers = user_currency_recharge_with_http_info(nonce, timestamp, signature, app_key, opts)
      data
    end

    # 充值虚拟币
    # 根据提供的参数进行虚拟币充值
    # @param nonce [String] 随机数
    # @param timestamp [Integer] 时间戳（允许与服务器时间误差在1分钟内）
    # @param signature [String] 签名
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [RechargePointRequest] :recharge_point_request 充值请求参数
    # @return [Array<(BooleanApiResponse, Integer, Hash)>] BooleanApiResponse data, response status code and response headers
    def user_currency_recharge_with_http_info(nonce, timestamp, signature, app_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserCurrencyApi.user_currency_recharge ...'
      end
      # verify the required parameter 'nonce' is set
      if @api_client.config.client_side_validation && nonce.nil?
        fail ArgumentError, "Missing the required parameter 'nonce' when calling UserCurrencyApi.user_currency_recharge"
      end
      # verify the required parameter 'timestamp' is set
      if @api_client.config.client_side_validation && timestamp.nil?
        fail ArgumentError, "Missing the required parameter 'timestamp' when calling UserCurrencyApi.user_currency_recharge"
      end
      # verify the required parameter 'signature' is set
      if @api_client.config.client_side_validation && signature.nil?
        fail ArgumentError, "Missing the required parameter 'signature' when calling UserCurrencyApi.user_currency_recharge"
      end
      # verify the required parameter 'app_key' is set
      if @api_client.config.client_side_validation && app_key.nil?
        fail ArgumentError, "Missing the required parameter 'app_key' when calling UserCurrencyApi.user_currency_recharge"
      end
      # resource path
      local_var_path = '/UserCurrency/{appKey}/CurrencyRecharge'.sub('{' + 'appKey' + '}', CGI.escape(app_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'nonce'] = nonce
      query_params[:'timestamp'] = timestamp
      query_params[:'signature'] = signature

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'recharge_point_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'BooleanApiResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"UserCurrencyApi.user_currency_recharge",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserCurrencyApi#user_currency_recharge\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 虚拟币交易记录
    # 根据提供的参数获取虚拟币交易记录
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :trans_type 交易类型
    # @option opts [String] :cur_code 货币代码
    # @option opts [Time] :start_time 开始时间
    # @option opts [Time] :end_time 结束时间
    # @option opts [Integer] :skip 跳过的条数
    # @option opts [Integer] :take 拉取的条数
    # @return [UserCurrencyCurrencyTransResultApiResponse]
    def user_currency_transactions(app_key, opts = {})
      data, _status_code, _headers = user_currency_transactions_with_http_info(app_key, opts)
      data
    end

    # 虚拟币交易记录
    # 根据提供的参数获取虚拟币交易记录
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :trans_type 交易类型
    # @option opts [String] :cur_code 货币代码
    # @option opts [Time] :start_time 开始时间
    # @option opts [Time] :end_time 结束时间
    # @option opts [Integer] :skip 跳过的条数
    # @option opts [Integer] :take 拉取的条数
    # @return [Array<(UserCurrencyCurrencyTransResultApiResponse, Integer, Hash)>] UserCurrencyCurrencyTransResultApiResponse data, response status code and response headers
    def user_currency_transactions_with_http_info(app_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserCurrencyApi.user_currency_transactions ...'
      end
      # verify the required parameter 'app_key' is set
      if @api_client.config.client_side_validation && app_key.nil?
        fail ArgumentError, "Missing the required parameter 'app_key' when calling UserCurrencyApi.user_currency_transactions"
      end
      # resource path
      local_var_path = '/UserCurrency/{appKey}/CurrencyTransactions'.sub('{' + 'appKey' + '}', CGI.escape(app_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'transType'] = opts[:'trans_type'] if !opts[:'trans_type'].nil?
      query_params[:'curCode'] = opts[:'cur_code'] if !opts[:'cur_code'].nil?
      query_params[:'startTime'] = opts[:'start_time'] if !opts[:'start_time'].nil?
      query_params[:'endTime'] = opts[:'end_time'] if !opts[:'end_time'].nil?
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'take'] = opts[:'take'] if !opts[:'take'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UserCurrencyCurrencyTransResultApiResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"UserCurrencyApi.user_currency_transactions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserCurrencyApi#user_currency_transactions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
