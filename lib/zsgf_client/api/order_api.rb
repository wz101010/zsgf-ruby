=begin
#用户全部 API 文档

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.13.0-SNAPSHOT

=end

require 'cgi'

module ZSGFClient
  class OrderApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # 获取订单详情
    # 根据订单ID获取订单详情
    # @param id [Integer] 订单ID
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @return [OrderApiResponse]
    def order(id, app_key, opts = {})
      data, _status_code, _headers = order_with_http_info(id, app_key, opts)
      data
    end

    # 获取订单详情
    # 根据订单ID获取订单详情
    # @param id [Integer] 订单ID
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrderApiResponse, Integer, Hash)>] OrderApiResponse data, response status code and response headers
    def order_with_http_info(id, app_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.order ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling OrderApi.order"
      end
      # verify the required parameter 'app_key' is set
      if @api_client.config.client_side_validation && app_key.nil?
        fail ArgumentError, "Missing the required parameter 'app_key' when calling OrderApi.order"
      end
      # resource path
      local_var_path = '/Order/{appKey}/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'appKey' + '}', CGI.escape(app_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrderApiResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"OrderApi.order",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#order\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 创建订单
    # 根据请求参数创建订单
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [CreateOrderRequest] :create_order_request 订单创建请求
    # @return [CreateOrderResultApiResponse]
    def order_create(app_key, opts = {})
      data, _status_code, _headers = order_create_with_http_info(app_key, opts)
      data
    end

    # 创建订单
    # 根据请求参数创建订单
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [CreateOrderRequest] :create_order_request 订单创建请求
    # @return [Array<(CreateOrderResultApiResponse, Integer, Hash)>] CreateOrderResultApiResponse data, response status code and response headers
    def order_create_with_http_info(app_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.order_create ...'
      end
      # verify the required parameter 'app_key' is set
      if @api_client.config.client_side_validation && app_key.nil?
        fail ArgumentError, "Missing the required parameter 'app_key' when calling OrderApi.order_create"
      end
      # resource path
      local_var_path = '/Order/{appKey}/Create'.sub('{' + 'appKey' + '}', CGI.escape(app_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_order_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'CreateOrderResultApiResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"OrderApi.order_create",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#order_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 获取订单列表
    # 根据查询条件获取订单列表
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :status 订单状态
    # @option opts [String] :order_no 系统订单号
    # @option opts [String] :trade_no 支付平台单号
    # @option opts [Integer] :user_id 用户ID
    # @option opts [String] :pct_type 商品类型
    # @option opts [String] :pct_id 商品ID
    # @option opts [String] :pct_name 商品名称
    # @option opts [Integer] :skip 跳过的条数
    # @option opts [Integer] :take 拉取的条数
    # @return [OrderListResultApiResponse]
    def orders(app_key, opts = {})
      data, _status_code, _headers = orders_with_http_info(app_key, opts)
      data
    end

    # 获取订单列表
    # 根据查询条件获取订单列表
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :status 订单状态
    # @option opts [String] :order_no 系统订单号
    # @option opts [String] :trade_no 支付平台单号
    # @option opts [Integer] :user_id 用户ID
    # @option opts [String] :pct_type 商品类型
    # @option opts [String] :pct_id 商品ID
    # @option opts [String] :pct_name 商品名称
    # @option opts [Integer] :skip 跳过的条数
    # @option opts [Integer] :take 拉取的条数
    # @return [Array<(OrderListResultApiResponse, Integer, Hash)>] OrderListResultApiResponse data, response status code and response headers
    def orders_with_http_info(app_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderApi.orders ...'
      end
      # verify the required parameter 'app_key' is set
      if @api_client.config.client_side_validation && app_key.nil?
        fail ArgumentError, "Missing the required parameter 'app_key' when calling OrderApi.orders"
      end
      # resource path
      local_var_path = '/Order/{appKey}'.sub('{' + 'appKey' + '}', CGI.escape(app_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'orderNo'] = opts[:'order_no'] if !opts[:'order_no'].nil?
      query_params[:'tradeNo'] = opts[:'trade_no'] if !opts[:'trade_no'].nil?
      query_params[:'userId'] = opts[:'user_id'] if !opts[:'user_id'].nil?
      query_params[:'pctType'] = opts[:'pct_type'] if !opts[:'pct_type'].nil?
      query_params[:'pctId'] = opts[:'pct_id'] if !opts[:'pct_id'].nil?
      query_params[:'pctName'] = opts[:'pct_name'] if !opts[:'pct_name'].nil?
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'take'] = opts[:'take'] if !opts[:'take'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrderListResultApiResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"OrderApi.orders",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderApi#orders\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
