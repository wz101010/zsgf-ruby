=begin
#用户全部 API 文档

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.13.0-SNAPSHOT

=end

require 'cgi'

module ZSGFClient
  class UserFriendsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # 推荐相似兴趣用户
    # 推荐有共同爱好的用户
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tag 兴趣标签
    # @option opts [Integer] :skip 跳过的记录数 (default to 0)
    # @option opts [Integer] :take 获取的记录数 (default to 10)
    # @return [UserCommonInterestsResultApiResponse]
    def user_common_interests(app_key, opts = {})
      data, _status_code, _headers = user_common_interests_with_http_info(app_key, opts)
      data
    end

    # 推荐相似兴趣用户
    # 推荐有共同爱好的用户
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tag 兴趣标签
    # @option opts [Integer] :skip 跳过的记录数 (default to 0)
    # @option opts [Integer] :take 获取的记录数 (default to 10)
    # @return [Array<(UserCommonInterestsResultApiResponse, Integer, Hash)>] UserCommonInterestsResultApiResponse data, response status code and response headers
    def user_common_interests_with_http_info(app_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserFriendsApi.user_common_interests ...'
      end
      # verify the required parameter 'app_key' is set
      if @api_client.config.client_side_validation && app_key.nil?
        fail ArgumentError, "Missing the required parameter 'app_key' when calling UserFriendsApi.user_common_interests"
      end
      # resource path
      local_var_path = '/UserFriends/{appKey}/CommonInterests'.sub('{' + 'appKey' + '}', CGI.escape(app_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'tag'] = opts[:'tag'] if !opts[:'tag'].nil?
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'take'] = opts[:'take'] if !opts[:'take'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UserCommonInterestsResultApiResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"UserFriendsApi.user_common_interests",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserFriendsApi#user_common_interests\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 添加关注
    # 关注指定用户
    # @param user_id [Integer] 要关注的用户ID
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @return [BooleanApiResponse]
    def user_follow_user(user_id, app_key, opts = {})
      data, _status_code, _headers = user_follow_user_with_http_info(user_id, app_key, opts)
      data
    end

    # 添加关注
    # 关注指定用户
    # @param user_id [Integer] 要关注的用户ID
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BooleanApiResponse, Integer, Hash)>] BooleanApiResponse data, response status code and response headers
    def user_follow_user_with_http_info(user_id, app_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserFriendsApi.user_follow_user ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UserFriendsApi.user_follow_user"
      end
      # verify the required parameter 'app_key' is set
      if @api_client.config.client_side_validation && app_key.nil?
        fail ArgumentError, "Missing the required parameter 'app_key' when calling UserFriendsApi.user_follow_user"
      end
      # resource path
      local_var_path = '/UserFriends/{appKey}/Follower/{userId}'.sub('{' + 'userId' + '}', CGI.escape(user_id.to_s)).sub('{' + 'appKey' + '}', CGI.escape(app_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BooleanApiResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"UserFriendsApi.user_follow_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserFriendsApi#user_follow_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 刷新粉丝数据
    # 根据粉丝ID更新粉丝信息
    # @param id [Integer] 粉丝ID
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [FollowerPutModel] :follower_put_model 更新粉丝的请求参数
    # @return [BooleanApiResponse]
    def user_follower_put(id, app_key, opts = {})
      data, _status_code, _headers = user_follower_put_with_http_info(id, app_key, opts)
      data
    end

    # 刷新粉丝数据
    # 根据粉丝ID更新粉丝信息
    # @param id [Integer] 粉丝ID
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [FollowerPutModel] :follower_put_model 更新粉丝的请求参数
    # @return [Array<(BooleanApiResponse, Integer, Hash)>] BooleanApiResponse data, response status code and response headers
    def user_follower_put_with_http_info(id, app_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserFriendsApi.user_follower_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling UserFriendsApi.user_follower_put"
      end
      # verify the required parameter 'app_key' is set
      if @api_client.config.client_side_validation && app_key.nil?
        fail ArgumentError, "Missing the required parameter 'app_key' when calling UserFriendsApi.user_follower_put"
      end
      # resource path
      local_var_path = '/UserFriends/{appKey}/Follower/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'appKey' + '}', CGI.escape(app_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'follower_put_model'])

      # return_type
      return_type = opts[:debug_return_type] || 'BooleanApiResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"UserFriendsApi.user_follower_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserFriendsApi#user_follower_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 获取粉丝列表
    # 根据条件获取我的粉丝列表
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tag 标签
    # @option opts [String] :status 状态
    # @option opts [Integer] :target_user_id 指定用户的粉丝 (default to 0)
    # @option opts [Integer] :skip 跳过的记录数 (default to 0)
    # @option opts [Integer] :take 获取的记录数 (default to 10)
    # @return [UserFollowersResultApiResponse]
    def user_followers(app_key, opts = {})
      data, _status_code, _headers = user_followers_with_http_info(app_key, opts)
      data
    end

    # 获取粉丝列表
    # 根据条件获取我的粉丝列表
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tag 标签
    # @option opts [String] :status 状态
    # @option opts [Integer] :target_user_id 指定用户的粉丝 (default to 0)
    # @option opts [Integer] :skip 跳过的记录数 (default to 0)
    # @option opts [Integer] :take 获取的记录数 (default to 10)
    # @return [Array<(UserFollowersResultApiResponse, Integer, Hash)>] UserFollowersResultApiResponse data, response status code and response headers
    def user_followers_with_http_info(app_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserFriendsApi.user_followers ...'
      end
      # verify the required parameter 'app_key' is set
      if @api_client.config.client_side_validation && app_key.nil?
        fail ArgumentError, "Missing the required parameter 'app_key' when calling UserFriendsApi.user_followers"
      end
      # resource path
      local_var_path = '/UserFriends/{appKey}/Followers'.sub('{' + 'appKey' + '}', CGI.escape(app_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'tag'] = opts[:'tag'] if !opts[:'tag'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'targetUserId'] = opts[:'target_user_id'] if !opts[:'target_user_id'].nil?
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'take'] = opts[:'take'] if !opts[:'take'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UserFollowersResultApiResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"UserFriendsApi.user_followers",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserFriendsApi#user_followers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 获取关注列表 / 判断是否关注
    # 根据条件获取我的关注列表，或判断是否关注某个用户
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tag 用于过滤关注列表的标签（可选）。
    # @option opts [String] :status 用于过滤关注列表的状态（可选）。
    # @option opts [Integer] :target_user_id 指定用户的关注记录，如果不提供则默认为当前用户的关注。 (default to 0)
    # @option opts [Integer] :skip 跳过的记录数，用于分页（默认0）。 (default to 0)
    # @option opts [Integer] :take 获取的记录数，用于分页（默认10）。 (default to 10)
    # @option opts [Integer] :check_user_id 要判断是否关注的目标用户ID。如果提供此参数，方法将返回一个布尔值，表示当前用户是否关注该目标用户。
    # @option opts [Boolean] :only_ids 是否只返回关注用户的ID集合，默认为false（即返回完整的关注用户信息）。 (default to false)
    # @return [BooleanApiResponse]
    def user_following(app_key, opts = {})
      data, _status_code, _headers = user_following_with_http_info(app_key, opts)
      data
    end

    # 获取关注列表 / 判断是否关注
    # 根据条件获取我的关注列表，或判断是否关注某个用户
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tag 用于过滤关注列表的标签（可选）。
    # @option opts [String] :status 用于过滤关注列表的状态（可选）。
    # @option opts [Integer] :target_user_id 指定用户的关注记录，如果不提供则默认为当前用户的关注。 (default to 0)
    # @option opts [Integer] :skip 跳过的记录数，用于分页（默认0）。 (default to 0)
    # @option opts [Integer] :take 获取的记录数，用于分页（默认10）。 (default to 10)
    # @option opts [Integer] :check_user_id 要判断是否关注的目标用户ID。如果提供此参数，方法将返回一个布尔值，表示当前用户是否关注该目标用户。
    # @option opts [Boolean] :only_ids 是否只返回关注用户的ID集合，默认为false（即返回完整的关注用户信息）。 (default to false)
    # @return [Array<(BooleanApiResponse, Integer, Hash)>] BooleanApiResponse data, response status code and response headers
    def user_following_with_http_info(app_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserFriendsApi.user_following ...'
      end
      # verify the required parameter 'app_key' is set
      if @api_client.config.client_side_validation && app_key.nil?
        fail ArgumentError, "Missing the required parameter 'app_key' when calling UserFriendsApi.user_following"
      end
      # resource path
      local_var_path = '/UserFriends/{appKey}/Following'.sub('{' + 'appKey' + '}', CGI.escape(app_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'tag'] = opts[:'tag'] if !opts[:'tag'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'targetUserId'] = opts[:'target_user_id'] if !opts[:'target_user_id'].nil?
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'take'] = opts[:'take'] if !opts[:'take'].nil?
      query_params[:'checkUserId'] = opts[:'check_user_id'] if !opts[:'check_user_id'].nil?
      query_params[:'onlyIDs'] = opts[:'only_ids'] if !opts[:'only_ids'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BooleanApiResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"UserFriendsApi.user_following",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserFriendsApi#user_following\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 推荐附近用户
    # 根据地理位置坐标和多种筛选条件，查询附近满足条件的用户列表，支持分页和按距离排序。 地理位置查询使用MySQL的ST_Distance_Sphere函数计算球面距离。 注意：longitude为经度(X轴)，latitude为纬度(Y轴)，参数顺序与常规坐标系一致
    # @param longitude [Float] 当前用户经度坐标(WGS84坐标系)
    # @param latitude [Float] 当前用户纬度坐标(WGS84坐标系)
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :country 国家过滤条件（精确匹配）
    # @option opts [String] :state 省份过滤条件（精确匹配）
    # @option opts [String] :city 城市过滤条件（精确匹配）
    # @option opts [String] :district 区县过滤条件（精确匹配）
    # @option opts [String] :gender 性别过滤条件（可选值示例：Male/Female/Other）
    # @option opts [Integer] :age_s 年龄起始范围（包含，0表示不限制）
    # @option opts [Integer] :age_e 年龄结束范围（包含，0表示不限制）
    # @option opts [String] :tag 兴趣标签过滤（支持模糊匹配，如：\&quot;运动\&quot;）
    # @option opts [Integer] :distance 搜索半径（单位：米，0表示不限制距离） (default to 0)
    # @option opts [Integer] :skip 跳过的记录数（分页起始位置，默认0） (default to 0)
    # @option opts [Integer] :take 获取的记录数（分页大小，默认10，最大100） (default to 10)
    # @return [UserFriendsNearByResultApiResponse]
    def user_friends_near_by(longitude, latitude, app_key, opts = {})
      data, _status_code, _headers = user_friends_near_by_with_http_info(longitude, latitude, app_key, opts)
      data
    end

    # 推荐附近用户
    # 根据地理位置坐标和多种筛选条件，查询附近满足条件的用户列表，支持分页和按距离排序。 地理位置查询使用MySQL的ST_Distance_Sphere函数计算球面距离。 注意：longitude为经度(X轴)，latitude为纬度(Y轴)，参数顺序与常规坐标系一致
    # @param longitude [Float] 当前用户经度坐标(WGS84坐标系)
    # @param latitude [Float] 当前用户纬度坐标(WGS84坐标系)
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :country 国家过滤条件（精确匹配）
    # @option opts [String] :state 省份过滤条件（精确匹配）
    # @option opts [String] :city 城市过滤条件（精确匹配）
    # @option opts [String] :district 区县过滤条件（精确匹配）
    # @option opts [String] :gender 性别过滤条件（可选值示例：Male/Female/Other）
    # @option opts [Integer] :age_s 年龄起始范围（包含，0表示不限制）
    # @option opts [Integer] :age_e 年龄结束范围（包含，0表示不限制）
    # @option opts [String] :tag 兴趣标签过滤（支持模糊匹配，如：\&quot;运动\&quot;）
    # @option opts [Integer] :distance 搜索半径（单位：米，0表示不限制距离） (default to 0)
    # @option opts [Integer] :skip 跳过的记录数（分页起始位置，默认0） (default to 0)
    # @option opts [Integer] :take 获取的记录数（分页大小，默认10，最大100） (default to 10)
    # @return [Array<(UserFriendsNearByResultApiResponse, Integer, Hash)>] UserFriendsNearByResultApiResponse data, response status code and response headers
    def user_friends_near_by_with_http_info(longitude, latitude, app_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserFriendsApi.user_friends_near_by ...'
      end
      # verify the required parameter 'longitude' is set
      if @api_client.config.client_side_validation && longitude.nil?
        fail ArgumentError, "Missing the required parameter 'longitude' when calling UserFriendsApi.user_friends_near_by"
      end
      # verify the required parameter 'latitude' is set
      if @api_client.config.client_side_validation && latitude.nil?
        fail ArgumentError, "Missing the required parameter 'latitude' when calling UserFriendsApi.user_friends_near_by"
      end
      # verify the required parameter 'app_key' is set
      if @api_client.config.client_side_validation && app_key.nil?
        fail ArgumentError, "Missing the required parameter 'app_key' when calling UserFriendsApi.user_friends_near_by"
      end
      # resource path
      local_var_path = '/UserFriends/{appKey}/NearBy'.sub('{' + 'appKey' + '}', CGI.escape(app_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'longitude'] = longitude
      query_params[:'latitude'] = latitude
      query_params[:'country'] = opts[:'country'] if !opts[:'country'].nil?
      query_params[:'state'] = opts[:'state'] if !opts[:'state'].nil?
      query_params[:'city'] = opts[:'city'] if !opts[:'city'].nil?
      query_params[:'district'] = opts[:'district'] if !opts[:'district'].nil?
      query_params[:'gender'] = opts[:'gender'] if !opts[:'gender'].nil?
      query_params[:'ageS'] = opts[:'age_s'] if !opts[:'age_s'].nil?
      query_params[:'ageE'] = opts[:'age_e'] if !opts[:'age_e'].nil?
      query_params[:'tag'] = opts[:'tag'] if !opts[:'tag'].nil?
      query_params[:'distance'] = opts[:'distance'] if !opts[:'distance'].nil?
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'take'] = opts[:'take'] if !opts[:'take'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UserFriendsNearByResultApiResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"UserFriendsApi.user_friends_near_by",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserFriendsApi#user_friends_near_by\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 推荐共同粉丝用户
    # 推荐有共同粉丝的用户
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip 跳过的记录数 (default to 0)
    # @option opts [Integer] :take 获取的记录数 (default to 10)
    # @return [UserMutualFollowersResultApiResponse]
    def user_mutual_followers(app_key, opts = {})
      data, _status_code, _headers = user_mutual_followers_with_http_info(app_key, opts)
      data
    end

    # 推荐共同粉丝用户
    # 推荐有共同粉丝的用户
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip 跳过的记录数 (default to 0)
    # @option opts [Integer] :take 获取的记录数 (default to 10)
    # @return [Array<(UserMutualFollowersResultApiResponse, Integer, Hash)>] UserMutualFollowersResultApiResponse data, response status code and response headers
    def user_mutual_followers_with_http_info(app_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserFriendsApi.user_mutual_followers ...'
      end
      # verify the required parameter 'app_key' is set
      if @api_client.config.client_side_validation && app_key.nil?
        fail ArgumentError, "Missing the required parameter 'app_key' when calling UserFriendsApi.user_mutual_followers"
      end
      # resource path
      local_var_path = '/UserFriends/{appKey}/MutualFollowers'.sub('{' + 'appKey' + '}', CGI.escape(app_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'take'] = opts[:'take'] if !opts[:'take'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UserMutualFollowersResultApiResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"UserFriendsApi.user_mutual_followers",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserFriendsApi#user_mutual_followers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 推荐共同关注用户
    # 推荐有共同关注的用户
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip 跳过的记录数 (default to 0)
    # @option opts [Integer] :take 获取的记录数 (default to 10)
    # @return [UserMutualFollowingsResultApiResponse]
    def user_mutual_followings(app_key, opts = {})
      data, _status_code, _headers = user_mutual_followings_with_http_info(app_key, opts)
      data
    end

    # 推荐共同关注用户
    # 推荐有共同关注的用户
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :skip 跳过的记录数 (default to 0)
    # @option opts [Integer] :take 获取的记录数 (default to 10)
    # @return [Array<(UserMutualFollowingsResultApiResponse, Integer, Hash)>] UserMutualFollowingsResultApiResponse data, response status code and response headers
    def user_mutual_followings_with_http_info(app_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserFriendsApi.user_mutual_followings ...'
      end
      # verify the required parameter 'app_key' is set
      if @api_client.config.client_side_validation && app_key.nil?
        fail ArgumentError, "Missing the required parameter 'app_key' when calling UserFriendsApi.user_mutual_followings"
      end
      # resource path
      local_var_path = '/UserFriends/{appKey}/MutualFollowings'.sub('{' + 'appKey' + '}', CGI.escape(app_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'skip'] = opts[:'skip'] if !opts[:'skip'].nil?
      query_params[:'take'] = opts[:'take'] if !opts[:'take'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UserMutualFollowingsResultApiResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"UserFriendsApi.user_mutual_followings",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserFriendsApi#user_mutual_followings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 获取用户资料
    # 用于他人主页展示
    # @param user_id [Integer] 用户ID
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @return [GetUserProfileResultApiResponse]
    def user_profile_by_id(user_id, app_key, opts = {})
      data, _status_code, _headers = user_profile_by_id_with_http_info(user_id, app_key, opts)
      data
    end

    # 获取用户资料
    # 用于他人主页展示
    # @param user_id [Integer] 用户ID
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetUserProfileResultApiResponse, Integer, Hash)>] GetUserProfileResultApiResponse data, response status code and response headers
    def user_profile_by_id_with_http_info(user_id, app_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserFriendsApi.user_profile_by_id ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UserFriendsApi.user_profile_by_id"
      end
      # verify the required parameter 'app_key' is set
      if @api_client.config.client_side_validation && app_key.nil?
        fail ArgumentError, "Missing the required parameter 'app_key' when calling UserFriendsApi.user_profile_by_id"
      end
      # resource path
      local_var_path = '/UserFriends/{appKey}/Profile/{userId}'.sub('{' + 'userId' + '}', CGI.escape(user_id.to_s)).sub('{' + 'appKey' + '}', CGI.escape(app_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetUserProfileResultApiResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"UserFriendsApi.user_profile_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserFriendsApi#user_profile_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 取消关注
    # 取消关注指定用户
    # @param user_id [Integer] 要取消关注的用户ID
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @return [BooleanApiResponse]
    def user_unfollow_user(user_id, app_key, opts = {})
      data, _status_code, _headers = user_unfollow_user_with_http_info(user_id, app_key, opts)
      data
    end

    # 取消关注
    # 取消关注指定用户
    # @param user_id [Integer] 要取消关注的用户ID
    # @param app_key [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BooleanApiResponse, Integer, Hash)>] BooleanApiResponse data, response status code and response headers
    def user_unfollow_user_with_http_info(user_id, app_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserFriendsApi.user_unfollow_user ...'
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling UserFriendsApi.user_unfollow_user"
      end
      # verify the required parameter 'app_key' is set
      if @api_client.config.client_side_validation && app_key.nil?
        fail ArgumentError, "Missing the required parameter 'app_key' when calling UserFriendsApi.user_unfollow_user"
      end
      # resource path
      local_var_path = '/UserFriends/{appKey}/Follower/{userId}'.sub('{' + 'userId' + '}', CGI.escape(user_id.to_s)).sub('{' + 'appKey' + '}', CGI.escape(app_key.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BooleanApiResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"UserFriendsApi.user_unfollow_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserFriendsApi#user_unfollow_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
