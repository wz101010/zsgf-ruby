=begin
#用户全部 API 文档

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.13.0-SNAPSHOT

=end

require 'date'
require 'time'

module ZSGFClient
  class UpdateProfileRequest
    # 用户头像的链接或路径，长度不能超过255个字符
    attr_accessor :avatar

    # 用户的其他数据，可以是序列化后的对象或JSON字符串
    attr_accessor :data

    # 用户的昵称，长度不能超过50个字符
    attr_accessor :nick_name

    # 兴趣标签
    attr_accessor :interest_tags

    # 个人简介，长度不能超过500个字符
    attr_accessor :biography

    # 性别，长度不能超过15个字符
    attr_accessor :gender

    # 生日
    attr_accessor :birthday

    # 职业，长度不能超过50个字符
    attr_accessor :occupation

    # 学历，长度不能超过50个字符
    attr_accessor :education

    # 联系方式，长度不能超过255个字符
    attr_accessor :contact

    # 语言，长度不能超过50个字符
    attr_accessor :languages

    # 社交网络链接，长度不能超过255个字符
    attr_accessor :social_links

    # 婚姻状态，长度不能超过20个字符
    attr_accessor :relationship_status

    # 公司，长度不能超过100个字符
    attr_accessor :company

    # 行业，长度不能超过50个字符
    attr_accessor :industry

    # 行业职位，长度不能超过50个字符
    attr_accessor :company_position

    # 私密设置，长度不能超过500个字符
    attr_accessor :private_settings

    # 是否启用二步验证
    attr_accessor :enable2_fa_auth

    # 是否启用账号登录
    attr_accessor :enable_user_name_sign_in

    # 是否启用邮箱登录
    attr_accessor :enable_email_sign_in

    # 是否启用手机登录
    attr_accessor :enable_phone_sign_in

    # 是否启用UnionID登录
    attr_accessor :enable_union_id_sign_in

    # 是否启用OAuth2登录
    attr_accessor :enable_o_auth

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'avatar' => :'avatar',
        :'data' => :'data',
        :'nick_name' => :'nickName',
        :'interest_tags' => :'interestTags',
        :'biography' => :'biography',
        :'gender' => :'gender',
        :'birthday' => :'birthday',
        :'occupation' => :'occupation',
        :'education' => :'education',
        :'contact' => :'contact',
        :'languages' => :'languages',
        :'social_links' => :'socialLinks',
        :'relationship_status' => :'relationshipStatus',
        :'company' => :'company',
        :'industry' => :'industry',
        :'company_position' => :'companyPosition',
        :'private_settings' => :'privateSettings',
        :'enable2_fa_auth' => :'enable2FAAuth',
        :'enable_user_name_sign_in' => :'enableUserNameSignIn',
        :'enable_email_sign_in' => :'enableEmailSignIn',
        :'enable_phone_sign_in' => :'enablePhoneSignIn',
        :'enable_union_id_sign_in' => :'enableUnionIDSignIn',
        :'enable_o_auth' => :'enableOAuth'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'avatar' => :'String',
        :'data' => :'String',
        :'nick_name' => :'String',
        :'interest_tags' => :'String',
        :'biography' => :'String',
        :'gender' => :'String',
        :'birthday' => :'Time',
        :'occupation' => :'String',
        :'education' => :'String',
        :'contact' => :'String',
        :'languages' => :'String',
        :'social_links' => :'String',
        :'relationship_status' => :'String',
        :'company' => :'String',
        :'industry' => :'String',
        :'company_position' => :'String',
        :'private_settings' => :'String',
        :'enable2_fa_auth' => :'Boolean',
        :'enable_user_name_sign_in' => :'Boolean',
        :'enable_email_sign_in' => :'Boolean',
        :'enable_phone_sign_in' => :'Boolean',
        :'enable_union_id_sign_in' => :'Boolean',
        :'enable_o_auth' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'avatar',
        :'data',
        :'nick_name',
        :'interest_tags',
        :'biography',
        :'gender',
        :'birthday',
        :'occupation',
        :'education',
        :'contact',
        :'languages',
        :'social_links',
        :'relationship_status',
        :'company',
        :'industry',
        :'company_position',
        :'private_settings',
        :'enable2_fa_auth',
        :'enable_user_name_sign_in',
        :'enable_email_sign_in',
        :'enable_phone_sign_in',
        :'enable_union_id_sign_in',
        :'enable_o_auth'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `ZSGFClient::UpdateProfileRequest` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `ZSGFClient::UpdateProfileRequest`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'avatar')
        self.avatar = attributes[:'avatar']
      end

      if attributes.key?(:'data')
        self.data = attributes[:'data']
      end

      if attributes.key?(:'nick_name')
        self.nick_name = attributes[:'nick_name']
      end

      if attributes.key?(:'interest_tags')
        self.interest_tags = attributes[:'interest_tags']
      end

      if attributes.key?(:'biography')
        self.biography = attributes[:'biography']
      end

      if attributes.key?(:'gender')
        self.gender = attributes[:'gender']
      end

      if attributes.key?(:'birthday')
        self.birthday = attributes[:'birthday']
      end

      if attributes.key?(:'occupation')
        self.occupation = attributes[:'occupation']
      end

      if attributes.key?(:'education')
        self.education = attributes[:'education']
      end

      if attributes.key?(:'contact')
        self.contact = attributes[:'contact']
      end

      if attributes.key?(:'languages')
        self.languages = attributes[:'languages']
      end

      if attributes.key?(:'social_links')
        self.social_links = attributes[:'social_links']
      end

      if attributes.key?(:'relationship_status')
        self.relationship_status = attributes[:'relationship_status']
      end

      if attributes.key?(:'company')
        self.company = attributes[:'company']
      end

      if attributes.key?(:'industry')
        self.industry = attributes[:'industry']
      end

      if attributes.key?(:'company_position')
        self.company_position = attributes[:'company_position']
      end

      if attributes.key?(:'private_settings')
        self.private_settings = attributes[:'private_settings']
      end

      if attributes.key?(:'enable2_fa_auth')
        self.enable2_fa_auth = attributes[:'enable2_fa_auth']
      end

      if attributes.key?(:'enable_user_name_sign_in')
        self.enable_user_name_sign_in = attributes[:'enable_user_name_sign_in']
      end

      if attributes.key?(:'enable_email_sign_in')
        self.enable_email_sign_in = attributes[:'enable_email_sign_in']
      end

      if attributes.key?(:'enable_phone_sign_in')
        self.enable_phone_sign_in = attributes[:'enable_phone_sign_in']
      end

      if attributes.key?(:'enable_union_id_sign_in')
        self.enable_union_id_sign_in = attributes[:'enable_union_id_sign_in']
      end

      if attributes.key?(:'enable_o_auth')
        self.enable_o_auth = attributes[:'enable_o_auth']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if !@avatar.nil? && @avatar.to_s.length > 255
        invalid_properties.push('invalid value for "avatar", the character length must be smaller than or equal to 255.')
      end

      if !@nick_name.nil? && @nick_name.to_s.length > 32
        invalid_properties.push('invalid value for "nick_name", the character length must be smaller than or equal to 32.')
      end

      if !@nick_name.nil? && @nick_name.to_s.length < 4
        invalid_properties.push('invalid value for "nick_name", the character length must be great than or equal to 4.')
      end

      if !@biography.nil? && @biography.to_s.length > 500
        invalid_properties.push('invalid value for "biography", the character length must be smaller than or equal to 500.')
      end

      if !@gender.nil? && @gender.to_s.length > 15
        invalid_properties.push('invalid value for "gender", the character length must be smaller than or equal to 15.')
      end

      if !@occupation.nil? && @occupation.to_s.length > 50
        invalid_properties.push('invalid value for "occupation", the character length must be smaller than or equal to 50.')
      end

      if !@education.nil? && @education.to_s.length > 50
        invalid_properties.push('invalid value for "education", the character length must be smaller than or equal to 50.')
      end

      if !@contact.nil? && @contact.to_s.length > 255
        invalid_properties.push('invalid value for "contact", the character length must be smaller than or equal to 255.')
      end

      if !@languages.nil? && @languages.to_s.length > 50
        invalid_properties.push('invalid value for "languages", the character length must be smaller than or equal to 50.')
      end

      if !@social_links.nil? && @social_links.to_s.length > 255
        invalid_properties.push('invalid value for "social_links", the character length must be smaller than or equal to 255.')
      end

      if !@relationship_status.nil? && @relationship_status.to_s.length > 20
        invalid_properties.push('invalid value for "relationship_status", the character length must be smaller than or equal to 20.')
      end

      if !@company.nil? && @company.to_s.length > 100
        invalid_properties.push('invalid value for "company", the character length must be smaller than or equal to 100.')
      end

      if !@industry.nil? && @industry.to_s.length > 50
        invalid_properties.push('invalid value for "industry", the character length must be smaller than or equal to 50.')
      end

      if !@company_position.nil? && @company_position.to_s.length > 50
        invalid_properties.push('invalid value for "company_position", the character length must be smaller than or equal to 50.')
      end

      if !@private_settings.nil? && @private_settings.to_s.length > 500
        invalid_properties.push('invalid value for "private_settings", the character length must be smaller than or equal to 500.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@avatar.nil? && @avatar.to_s.length > 255
      return false if !@nick_name.nil? && @nick_name.to_s.length > 32
      return false if !@nick_name.nil? && @nick_name.to_s.length < 4
      return false if !@biography.nil? && @biography.to_s.length > 500
      return false if !@gender.nil? && @gender.to_s.length > 15
      return false if !@occupation.nil? && @occupation.to_s.length > 50
      return false if !@education.nil? && @education.to_s.length > 50
      return false if !@contact.nil? && @contact.to_s.length > 255
      return false if !@languages.nil? && @languages.to_s.length > 50
      return false if !@social_links.nil? && @social_links.to_s.length > 255
      return false if !@relationship_status.nil? && @relationship_status.to_s.length > 20
      return false if !@company.nil? && @company.to_s.length > 100
      return false if !@industry.nil? && @industry.to_s.length > 50
      return false if !@company_position.nil? && @company_position.to_s.length > 50
      return false if !@private_settings.nil? && @private_settings.to_s.length > 500
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] avatar Value to be assigned
    def avatar=(avatar)
      if !avatar.nil? && avatar.to_s.length > 255
        fail ArgumentError, 'invalid value for "avatar", the character length must be smaller than or equal to 255.'
      end

      @avatar = avatar
    end

    # Custom attribute writer method with validation
    # @param [Object] nick_name Value to be assigned
    def nick_name=(nick_name)
      if !nick_name.nil? && nick_name.to_s.length > 32
        fail ArgumentError, 'invalid value for "nick_name", the character length must be smaller than or equal to 32.'
      end

      if !nick_name.nil? && nick_name.to_s.length < 4
        fail ArgumentError, 'invalid value for "nick_name", the character length must be great than or equal to 4.'
      end

      @nick_name = nick_name
    end

    # Custom attribute writer method with validation
    # @param [Object] biography Value to be assigned
    def biography=(biography)
      if !biography.nil? && biography.to_s.length > 500
        fail ArgumentError, 'invalid value for "biography", the character length must be smaller than or equal to 500.'
      end

      @biography = biography
    end

    # Custom attribute writer method with validation
    # @param [Object] gender Value to be assigned
    def gender=(gender)
      if !gender.nil? && gender.to_s.length > 15
        fail ArgumentError, 'invalid value for "gender", the character length must be smaller than or equal to 15.'
      end

      @gender = gender
    end

    # Custom attribute writer method with validation
    # @param [Object] occupation Value to be assigned
    def occupation=(occupation)
      if !occupation.nil? && occupation.to_s.length > 50
        fail ArgumentError, 'invalid value for "occupation", the character length must be smaller than or equal to 50.'
      end

      @occupation = occupation
    end

    # Custom attribute writer method with validation
    # @param [Object] education Value to be assigned
    def education=(education)
      if !education.nil? && education.to_s.length > 50
        fail ArgumentError, 'invalid value for "education", the character length must be smaller than or equal to 50.'
      end

      @education = education
    end

    # Custom attribute writer method with validation
    # @param [Object] contact Value to be assigned
    def contact=(contact)
      if !contact.nil? && contact.to_s.length > 255
        fail ArgumentError, 'invalid value for "contact", the character length must be smaller than or equal to 255.'
      end

      @contact = contact
    end

    # Custom attribute writer method with validation
    # @param [Object] languages Value to be assigned
    def languages=(languages)
      if !languages.nil? && languages.to_s.length > 50
        fail ArgumentError, 'invalid value for "languages", the character length must be smaller than or equal to 50.'
      end

      @languages = languages
    end

    # Custom attribute writer method with validation
    # @param [Object] social_links Value to be assigned
    def social_links=(social_links)
      if !social_links.nil? && social_links.to_s.length > 255
        fail ArgumentError, 'invalid value for "social_links", the character length must be smaller than or equal to 255.'
      end

      @social_links = social_links
    end

    # Custom attribute writer method with validation
    # @param [Object] relationship_status Value to be assigned
    def relationship_status=(relationship_status)
      if !relationship_status.nil? && relationship_status.to_s.length > 20
        fail ArgumentError, 'invalid value for "relationship_status", the character length must be smaller than or equal to 20.'
      end

      @relationship_status = relationship_status
    end

    # Custom attribute writer method with validation
    # @param [Object] company Value to be assigned
    def company=(company)
      if !company.nil? && company.to_s.length > 100
        fail ArgumentError, 'invalid value for "company", the character length must be smaller than or equal to 100.'
      end

      @company = company
    end

    # Custom attribute writer method with validation
    # @param [Object] industry Value to be assigned
    def industry=(industry)
      if !industry.nil? && industry.to_s.length > 50
        fail ArgumentError, 'invalid value for "industry", the character length must be smaller than or equal to 50.'
      end

      @industry = industry
    end

    # Custom attribute writer method with validation
    # @param [Object] company_position Value to be assigned
    def company_position=(company_position)
      if !company_position.nil? && company_position.to_s.length > 50
        fail ArgumentError, 'invalid value for "company_position", the character length must be smaller than or equal to 50.'
      end

      @company_position = company_position
    end

    # Custom attribute writer method with validation
    # @param [Object] private_settings Value to be assigned
    def private_settings=(private_settings)
      if !private_settings.nil? && private_settings.to_s.length > 500
        fail ArgumentError, 'invalid value for "private_settings", the character length must be smaller than or equal to 500.'
      end

      @private_settings = private_settings
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          avatar == o.avatar &&
          data == o.data &&
          nick_name == o.nick_name &&
          interest_tags == o.interest_tags &&
          biography == o.biography &&
          gender == o.gender &&
          birthday == o.birthday &&
          occupation == o.occupation &&
          education == o.education &&
          contact == o.contact &&
          languages == o.languages &&
          social_links == o.social_links &&
          relationship_status == o.relationship_status &&
          company == o.company &&
          industry == o.industry &&
          company_position == o.company_position &&
          private_settings == o.private_settings &&
          enable2_fa_auth == o.enable2_fa_auth &&
          enable_user_name_sign_in == o.enable_user_name_sign_in &&
          enable_email_sign_in == o.enable_email_sign_in &&
          enable_phone_sign_in == o.enable_phone_sign_in &&
          enable_union_id_sign_in == o.enable_union_id_sign_in &&
          enable_o_auth == o.enable_o_auth
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [avatar, data, nick_name, interest_tags, biography, gender, birthday, occupation, education, contact, languages, social_links, relationship_status, company, industry, company_position, private_settings, enable2_fa_auth, enable_user_name_sign_in, enable_email_sign_in, enable_phone_sign_in, enable_union_id_sign_in, enable_o_auth].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ZSGFClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
