=begin
#用户全部 API 文档

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.13.0-SNAPSHOT

=end

require 'date'
require 'time'

module ZSGFClient
  # 地理位置
  class GeoLocation
    # 唯一标识
    attr_accessor :id

    # 业务代码
    attr_accessor :biz_code

    # 业务ID
    attr_accessor :biz_id

    attr_accessor :coordinates

    # 地点的名称
    attr_accessor :location_name

    # 地点类型
    attr_accessor :location_type

    # 收货人姓名
    attr_accessor :recipient_name

    # 收货人联系电话
    attr_accessor :phone_number

    # 收货人电子邮件
    attr_accessor :email

    # 国家
    attr_accessor :country

    # 州/省
    attr_accessor :state

    # 城市
    attr_accessor :city

    # 区/县
    attr_accessor :district

    # 街道
    attr_accessor :street

    # 邮政编码
    attr_accessor :zip_code

    # 详细的地址信息
    attr_accessor :address

    # 地址类型
    attr_accessor :map_type

    # 备注
    attr_accessor :remark

    # 标签
    attr_accessor :tags

    # 是否启用
    attr_accessor :enable

    # 排序索引
    attr_accessor :show_index

    # 创建时间
    attr_accessor :create_date

    # 最后更新时间
    attr_accessor :last_update

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'biz_code' => :'bizCode',
        :'biz_id' => :'bizID',
        :'coordinates' => :'coordinates',
        :'location_name' => :'locationName',
        :'location_type' => :'locationType',
        :'recipient_name' => :'recipientName',
        :'phone_number' => :'phoneNumber',
        :'email' => :'email',
        :'country' => :'country',
        :'state' => :'state',
        :'city' => :'city',
        :'district' => :'district',
        :'street' => :'street',
        :'zip_code' => :'zipCode',
        :'address' => :'address',
        :'map_type' => :'mapType',
        :'remark' => :'remark',
        :'tags' => :'tags',
        :'enable' => :'enable',
        :'show_index' => :'showIndex',
        :'create_date' => :'createDate',
        :'last_update' => :'lastUpdate'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Integer',
        :'biz_code' => :'String',
        :'biz_id' => :'Integer',
        :'coordinates' => :'MySqlGeometry',
        :'location_name' => :'String',
        :'location_type' => :'String',
        :'recipient_name' => :'String',
        :'phone_number' => :'String',
        :'email' => :'String',
        :'country' => :'String',
        :'state' => :'String',
        :'city' => :'String',
        :'district' => :'String',
        :'street' => :'String',
        :'zip_code' => :'String',
        :'address' => :'String',
        :'map_type' => :'String',
        :'remark' => :'String',
        :'tags' => :'String',
        :'enable' => :'Boolean',
        :'show_index' => :'Integer',
        :'create_date' => :'Time',
        :'last_update' => :'Time'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'location_name',
        :'location_type',
        :'recipient_name',
        :'phone_number',
        :'email',
        :'country',
        :'state',
        :'city',
        :'district',
        :'street',
        :'zip_code',
        :'address',
        :'map_type',
        :'remark',
        :'tags',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `ZSGFClient::GeoLocation` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `ZSGFClient::GeoLocation`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'biz_code')
        self.biz_code = attributes[:'biz_code']
      else
        self.biz_code = nil
      end

      if attributes.key?(:'biz_id')
        self.biz_id = attributes[:'biz_id']
      else
        self.biz_id = nil
      end

      if attributes.key?(:'coordinates')
        self.coordinates = attributes[:'coordinates']
      else
        self.coordinates = nil
      end

      if attributes.key?(:'location_name')
        self.location_name = attributes[:'location_name']
      end

      if attributes.key?(:'location_type')
        self.location_type = attributes[:'location_type']
      end

      if attributes.key?(:'recipient_name')
        self.recipient_name = attributes[:'recipient_name']
      end

      if attributes.key?(:'phone_number')
        self.phone_number = attributes[:'phone_number']
      end

      if attributes.key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.key?(:'country')
        self.country = attributes[:'country']
      end

      if attributes.key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.key?(:'city')
        self.city = attributes[:'city']
      end

      if attributes.key?(:'district')
        self.district = attributes[:'district']
      end

      if attributes.key?(:'street')
        self.street = attributes[:'street']
      end

      if attributes.key?(:'zip_code')
        self.zip_code = attributes[:'zip_code']
      end

      if attributes.key?(:'address')
        self.address = attributes[:'address']
      end

      if attributes.key?(:'map_type')
        self.map_type = attributes[:'map_type']
      end

      if attributes.key?(:'remark')
        self.remark = attributes[:'remark']
      end

      if attributes.key?(:'tags')
        self.tags = attributes[:'tags']
      end

      if attributes.key?(:'enable')
        self.enable = attributes[:'enable']
      end

      if attributes.key?(:'show_index')
        self.show_index = attributes[:'show_index']
      end

      if attributes.key?(:'create_date')
        self.create_date = attributes[:'create_date']
      end

      if attributes.key?(:'last_update')
        self.last_update = attributes[:'last_update']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @biz_code.nil?
        invalid_properties.push('invalid value for "biz_code", biz_code cannot be nil.')
      end

      if @biz_code.to_s.length > 255
        invalid_properties.push('invalid value for "biz_code", the character length must be smaller than or equal to 255.')
      end

      if @biz_code.to_s.length < 1
        invalid_properties.push('invalid value for "biz_code", the character length must be great than or equal to 1.')
      end

      if @biz_id.nil?
        invalid_properties.push('invalid value for "biz_id", biz_id cannot be nil.')
      end

      if @coordinates.nil?
        invalid_properties.push('invalid value for "coordinates", coordinates cannot be nil.')
      end

      if !@location_name.nil? && @location_name.to_s.length > 255
        invalid_properties.push('invalid value for "location_name", the character length must be smaller than or equal to 255.')
      end

      if !@location_type.nil? && @location_type.to_s.length > 255
        invalid_properties.push('invalid value for "location_type", the character length must be smaller than or equal to 255.')
      end

      if !@recipient_name.nil? && @recipient_name.to_s.length > 255
        invalid_properties.push('invalid value for "recipient_name", the character length must be smaller than or equal to 255.')
      end

      if !@phone_number.nil? && @phone_number.to_s.length > 20
        invalid_properties.push('invalid value for "phone_number", the character length must be smaller than or equal to 20.')
      end

      if !@email.nil? && @email.to_s.length > 255
        invalid_properties.push('invalid value for "email", the character length must be smaller than or equal to 255.')
      end

      if !@country.nil? && @country.to_s.length > 100
        invalid_properties.push('invalid value for "country", the character length must be smaller than or equal to 100.')
      end

      if !@state.nil? && @state.to_s.length > 100
        invalid_properties.push('invalid value for "state", the character length must be smaller than or equal to 100.')
      end

      if !@city.nil? && @city.to_s.length > 100
        invalid_properties.push('invalid value for "city", the character length must be smaller than or equal to 100.')
      end

      if !@district.nil? && @district.to_s.length > 100
        invalid_properties.push('invalid value for "district", the character length must be smaller than or equal to 100.')
      end

      if !@street.nil? && @street.to_s.length > 255
        invalid_properties.push('invalid value for "street", the character length must be smaller than or equal to 255.')
      end

      if !@zip_code.nil? && @zip_code.to_s.length > 20
        invalid_properties.push('invalid value for "zip_code", the character length must be smaller than or equal to 20.')
      end

      if !@address.nil? && @address.to_s.length > 255
        invalid_properties.push('invalid value for "address", the character length must be smaller than or equal to 255.')
      end

      if !@map_type.nil? && @map_type.to_s.length > 50
        invalid_properties.push('invalid value for "map_type", the character length must be smaller than or equal to 50.')
      end

      if !@remark.nil? && @remark.to_s.length > 255
        invalid_properties.push('invalid value for "remark", the character length must be smaller than or equal to 255.')
      end

      if !@tags.nil? && @tags.to_s.length > 255
        invalid_properties.push('invalid value for "tags", the character length must be smaller than or equal to 255.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @biz_code.nil?
      return false if @biz_code.to_s.length > 255
      return false if @biz_code.to_s.length < 1
      return false if @biz_id.nil?
      return false if @coordinates.nil?
      return false if !@location_name.nil? && @location_name.to_s.length > 255
      return false if !@location_type.nil? && @location_type.to_s.length > 255
      return false if !@recipient_name.nil? && @recipient_name.to_s.length > 255
      return false if !@phone_number.nil? && @phone_number.to_s.length > 20
      return false if !@email.nil? && @email.to_s.length > 255
      return false if !@country.nil? && @country.to_s.length > 100
      return false if !@state.nil? && @state.to_s.length > 100
      return false if !@city.nil? && @city.to_s.length > 100
      return false if !@district.nil? && @district.to_s.length > 100
      return false if !@street.nil? && @street.to_s.length > 255
      return false if !@zip_code.nil? && @zip_code.to_s.length > 20
      return false if !@address.nil? && @address.to_s.length > 255
      return false if !@map_type.nil? && @map_type.to_s.length > 50
      return false if !@remark.nil? && @remark.to_s.length > 255
      return false if !@tags.nil? && @tags.to_s.length > 255
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] biz_code Value to be assigned
    def biz_code=(biz_code)
      if biz_code.nil?
        fail ArgumentError, 'biz_code cannot be nil'
      end

      if biz_code.to_s.length > 255
        fail ArgumentError, 'invalid value for "biz_code", the character length must be smaller than or equal to 255.'
      end

      if biz_code.to_s.length < 1
        fail ArgumentError, 'invalid value for "biz_code", the character length must be great than or equal to 1.'
      end

      @biz_code = biz_code
    end

    # Custom attribute writer method with validation
    # @param [Object] biz_id Value to be assigned
    def biz_id=(biz_id)
      if biz_id.nil?
        fail ArgumentError, 'biz_id cannot be nil'
      end

      @biz_id = biz_id
    end

    # Custom attribute writer method with validation
    # @param [Object] coordinates Value to be assigned
    def coordinates=(coordinates)
      if coordinates.nil?
        fail ArgumentError, 'coordinates cannot be nil'
      end

      @coordinates = coordinates
    end

    # Custom attribute writer method with validation
    # @param [Object] location_name Value to be assigned
    def location_name=(location_name)
      if !location_name.nil? && location_name.to_s.length > 255
        fail ArgumentError, 'invalid value for "location_name", the character length must be smaller than or equal to 255.'
      end

      @location_name = location_name
    end

    # Custom attribute writer method with validation
    # @param [Object] location_type Value to be assigned
    def location_type=(location_type)
      if !location_type.nil? && location_type.to_s.length > 255
        fail ArgumentError, 'invalid value for "location_type", the character length must be smaller than or equal to 255.'
      end

      @location_type = location_type
    end

    # Custom attribute writer method with validation
    # @param [Object] recipient_name Value to be assigned
    def recipient_name=(recipient_name)
      if !recipient_name.nil? && recipient_name.to_s.length > 255
        fail ArgumentError, 'invalid value for "recipient_name", the character length must be smaller than or equal to 255.'
      end

      @recipient_name = recipient_name
    end

    # Custom attribute writer method with validation
    # @param [Object] phone_number Value to be assigned
    def phone_number=(phone_number)
      if !phone_number.nil? && phone_number.to_s.length > 20
        fail ArgumentError, 'invalid value for "phone_number", the character length must be smaller than or equal to 20.'
      end

      @phone_number = phone_number
    end

    # Custom attribute writer method with validation
    # @param [Object] email Value to be assigned
    def email=(email)
      if !email.nil? && email.to_s.length > 255
        fail ArgumentError, 'invalid value for "email", the character length must be smaller than or equal to 255.'
      end

      @email = email
    end

    # Custom attribute writer method with validation
    # @param [Object] country Value to be assigned
    def country=(country)
      if !country.nil? && country.to_s.length > 100
        fail ArgumentError, 'invalid value for "country", the character length must be smaller than or equal to 100.'
      end

      @country = country
    end

    # Custom attribute writer method with validation
    # @param [Object] state Value to be assigned
    def state=(state)
      if !state.nil? && state.to_s.length > 100
        fail ArgumentError, 'invalid value for "state", the character length must be smaller than or equal to 100.'
      end

      @state = state
    end

    # Custom attribute writer method with validation
    # @param [Object] city Value to be assigned
    def city=(city)
      if !city.nil? && city.to_s.length > 100
        fail ArgumentError, 'invalid value for "city", the character length must be smaller than or equal to 100.'
      end

      @city = city
    end

    # Custom attribute writer method with validation
    # @param [Object] district Value to be assigned
    def district=(district)
      if !district.nil? && district.to_s.length > 100
        fail ArgumentError, 'invalid value for "district", the character length must be smaller than or equal to 100.'
      end

      @district = district
    end

    # Custom attribute writer method with validation
    # @param [Object] street Value to be assigned
    def street=(street)
      if !street.nil? && street.to_s.length > 255
        fail ArgumentError, 'invalid value for "street", the character length must be smaller than or equal to 255.'
      end

      @street = street
    end

    # Custom attribute writer method with validation
    # @param [Object] zip_code Value to be assigned
    def zip_code=(zip_code)
      if !zip_code.nil? && zip_code.to_s.length > 20
        fail ArgumentError, 'invalid value for "zip_code", the character length must be smaller than or equal to 20.'
      end

      @zip_code = zip_code
    end

    # Custom attribute writer method with validation
    # @param [Object] address Value to be assigned
    def address=(address)
      if !address.nil? && address.to_s.length > 255
        fail ArgumentError, 'invalid value for "address", the character length must be smaller than or equal to 255.'
      end

      @address = address
    end

    # Custom attribute writer method with validation
    # @param [Object] map_type Value to be assigned
    def map_type=(map_type)
      if !map_type.nil? && map_type.to_s.length > 50
        fail ArgumentError, 'invalid value for "map_type", the character length must be smaller than or equal to 50.'
      end

      @map_type = map_type
    end

    # Custom attribute writer method with validation
    # @param [Object] remark Value to be assigned
    def remark=(remark)
      if !remark.nil? && remark.to_s.length > 255
        fail ArgumentError, 'invalid value for "remark", the character length must be smaller than or equal to 255.'
      end

      @remark = remark
    end

    # Custom attribute writer method with validation
    # @param [Object] tags Value to be assigned
    def tags=(tags)
      if !tags.nil? && tags.to_s.length > 255
        fail ArgumentError, 'invalid value for "tags", the character length must be smaller than or equal to 255.'
      end

      @tags = tags
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          biz_code == o.biz_code &&
          biz_id == o.biz_id &&
          coordinates == o.coordinates &&
          location_name == o.location_name &&
          location_type == o.location_type &&
          recipient_name == o.recipient_name &&
          phone_number == o.phone_number &&
          email == o.email &&
          country == o.country &&
          state == o.state &&
          city == o.city &&
          district == o.district &&
          street == o.street &&
          zip_code == o.zip_code &&
          address == o.address &&
          map_type == o.map_type &&
          remark == o.remark &&
          tags == o.tags &&
          enable == o.enable &&
          show_index == o.show_index &&
          create_date == o.create_date &&
          last_update == o.last_update
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, biz_code, biz_id, coordinates, location_name, location_type, recipient_name, phone_number, email, country, state, city, district, street, zip_code, address, map_type, remark, tags, enable, show_index, create_date, last_update].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ZSGFClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
