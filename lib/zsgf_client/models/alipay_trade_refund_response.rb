=begin
#用户全部 API 文档

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.13.0-SNAPSHOT

=end

require 'date'
require 'time'

module ZSGFClient
  class AlipayTradeRefundResponse
    attr_accessor :code

    attr_accessor :msg

    attr_accessor :sub_code

    attr_accessor :sub_msg

    attr_accessor :body

    attr_accessor :is_error

    attr_accessor :buyer_logon_id

    attr_accessor :buyer_open_id

    attr_accessor :buyer_user_id

    attr_accessor :fund_change

    attr_accessor :gmt_refund_pay

    attr_accessor :has_deposit_back

    attr_accessor :open_id

    attr_accessor :out_trade_no

    attr_accessor :pre_auth_cancel_fee

    attr_accessor :present_refund_buyer_amount

    attr_accessor :present_refund_discount_amount

    attr_accessor :present_refund_mdiscount_amount

    attr_accessor :refund_charge_amount

    attr_accessor :refund_charge_info_list

    attr_accessor :refund_currency

    attr_accessor :refund_detail_item_list

    attr_accessor :refund_fee

    attr_accessor :refund_hyb_amount

    attr_accessor :refund_preset_paytool_list

    attr_accessor :refund_settlement_id

    attr_accessor :refund_voucher_detail_list

    attr_accessor :send_back_fee

    attr_accessor :store_name

    attr_accessor :trade_no

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'code' => :'code',
        :'msg' => :'msg',
        :'sub_code' => :'subCode',
        :'sub_msg' => :'subMsg',
        :'body' => :'body',
        :'is_error' => :'isError',
        :'buyer_logon_id' => :'buyerLogonId',
        :'buyer_open_id' => :'buyerOpenId',
        :'buyer_user_id' => :'buyerUserId',
        :'fund_change' => :'fundChange',
        :'gmt_refund_pay' => :'gmtRefundPay',
        :'has_deposit_back' => :'hasDepositBack',
        :'open_id' => :'openId',
        :'out_trade_no' => :'outTradeNo',
        :'pre_auth_cancel_fee' => :'preAuthCancelFee',
        :'present_refund_buyer_amount' => :'presentRefundBuyerAmount',
        :'present_refund_discount_amount' => :'presentRefundDiscountAmount',
        :'present_refund_mdiscount_amount' => :'presentRefundMdiscountAmount',
        :'refund_charge_amount' => :'refundChargeAmount',
        :'refund_charge_info_list' => :'refundChargeInfoList',
        :'refund_currency' => :'refundCurrency',
        :'refund_detail_item_list' => :'refundDetailItemList',
        :'refund_fee' => :'refundFee',
        :'refund_hyb_amount' => :'refundHybAmount',
        :'refund_preset_paytool_list' => :'refundPresetPaytoolList',
        :'refund_settlement_id' => :'refundSettlementId',
        :'refund_voucher_detail_list' => :'refundVoucherDetailList',
        :'send_back_fee' => :'sendBackFee',
        :'store_name' => :'storeName',
        :'trade_no' => :'tradeNo'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'code' => :'String',
        :'msg' => :'String',
        :'sub_code' => :'String',
        :'sub_msg' => :'String',
        :'body' => :'String',
        :'is_error' => :'Boolean',
        :'buyer_logon_id' => :'String',
        :'buyer_open_id' => :'String',
        :'buyer_user_id' => :'String',
        :'fund_change' => :'String',
        :'gmt_refund_pay' => :'String',
        :'has_deposit_back' => :'String',
        :'open_id' => :'String',
        :'out_trade_no' => :'String',
        :'pre_auth_cancel_fee' => :'String',
        :'present_refund_buyer_amount' => :'String',
        :'present_refund_discount_amount' => :'String',
        :'present_refund_mdiscount_amount' => :'String',
        :'refund_charge_amount' => :'String',
        :'refund_charge_info_list' => :'Array<RefundChargeInfo>',
        :'refund_currency' => :'String',
        :'refund_detail_item_list' => :'Array<TradeFundBill>',
        :'refund_fee' => :'String',
        :'refund_hyb_amount' => :'String',
        :'refund_preset_paytool_list' => :'PresetPayToolInfo',
        :'refund_settlement_id' => :'String',
        :'refund_voucher_detail_list' => :'Array<VoucherDetail>',
        :'send_back_fee' => :'String',
        :'store_name' => :'String',
        :'trade_no' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'code',
        :'msg',
        :'sub_code',
        :'sub_msg',
        :'body',
        :'buyer_logon_id',
        :'buyer_open_id',
        :'buyer_user_id',
        :'fund_change',
        :'gmt_refund_pay',
        :'has_deposit_back',
        :'open_id',
        :'out_trade_no',
        :'pre_auth_cancel_fee',
        :'present_refund_buyer_amount',
        :'present_refund_discount_amount',
        :'present_refund_mdiscount_amount',
        :'refund_charge_amount',
        :'refund_charge_info_list',
        :'refund_currency',
        :'refund_detail_item_list',
        :'refund_fee',
        :'refund_hyb_amount',
        :'refund_settlement_id',
        :'refund_voucher_detail_list',
        :'send_back_fee',
        :'store_name',
        :'trade_no'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `ZSGFClient::AlipayTradeRefundResponse` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `ZSGFClient::AlipayTradeRefundResponse`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'code')
        self.code = attributes[:'code']
      end

      if attributes.key?(:'msg')
        self.msg = attributes[:'msg']
      end

      if attributes.key?(:'sub_code')
        self.sub_code = attributes[:'sub_code']
      end

      if attributes.key?(:'sub_msg')
        self.sub_msg = attributes[:'sub_msg']
      end

      if attributes.key?(:'body')
        self.body = attributes[:'body']
      end

      if attributes.key?(:'is_error')
        self.is_error = attributes[:'is_error']
      end

      if attributes.key?(:'buyer_logon_id')
        self.buyer_logon_id = attributes[:'buyer_logon_id']
      end

      if attributes.key?(:'buyer_open_id')
        self.buyer_open_id = attributes[:'buyer_open_id']
      end

      if attributes.key?(:'buyer_user_id')
        self.buyer_user_id = attributes[:'buyer_user_id']
      end

      if attributes.key?(:'fund_change')
        self.fund_change = attributes[:'fund_change']
      end

      if attributes.key?(:'gmt_refund_pay')
        self.gmt_refund_pay = attributes[:'gmt_refund_pay']
      end

      if attributes.key?(:'has_deposit_back')
        self.has_deposit_back = attributes[:'has_deposit_back']
      end

      if attributes.key?(:'open_id')
        self.open_id = attributes[:'open_id']
      end

      if attributes.key?(:'out_trade_no')
        self.out_trade_no = attributes[:'out_trade_no']
      end

      if attributes.key?(:'pre_auth_cancel_fee')
        self.pre_auth_cancel_fee = attributes[:'pre_auth_cancel_fee']
      end

      if attributes.key?(:'present_refund_buyer_amount')
        self.present_refund_buyer_amount = attributes[:'present_refund_buyer_amount']
      end

      if attributes.key?(:'present_refund_discount_amount')
        self.present_refund_discount_amount = attributes[:'present_refund_discount_amount']
      end

      if attributes.key?(:'present_refund_mdiscount_amount')
        self.present_refund_mdiscount_amount = attributes[:'present_refund_mdiscount_amount']
      end

      if attributes.key?(:'refund_charge_amount')
        self.refund_charge_amount = attributes[:'refund_charge_amount']
      end

      if attributes.key?(:'refund_charge_info_list')
        if (value = attributes[:'refund_charge_info_list']).is_a?(Array)
          self.refund_charge_info_list = value
        end
      end

      if attributes.key?(:'refund_currency')
        self.refund_currency = attributes[:'refund_currency']
      end

      if attributes.key?(:'refund_detail_item_list')
        if (value = attributes[:'refund_detail_item_list']).is_a?(Array)
          self.refund_detail_item_list = value
        end
      end

      if attributes.key?(:'refund_fee')
        self.refund_fee = attributes[:'refund_fee']
      end

      if attributes.key?(:'refund_hyb_amount')
        self.refund_hyb_amount = attributes[:'refund_hyb_amount']
      end

      if attributes.key?(:'refund_preset_paytool_list')
        self.refund_preset_paytool_list = attributes[:'refund_preset_paytool_list']
      end

      if attributes.key?(:'refund_settlement_id')
        self.refund_settlement_id = attributes[:'refund_settlement_id']
      end

      if attributes.key?(:'refund_voucher_detail_list')
        if (value = attributes[:'refund_voucher_detail_list']).is_a?(Array)
          self.refund_voucher_detail_list = value
        end
      end

      if attributes.key?(:'send_back_fee')
        self.send_back_fee = attributes[:'send_back_fee']
      end

      if attributes.key?(:'store_name')
        self.store_name = attributes[:'store_name']
      end

      if attributes.key?(:'trade_no')
        self.trade_no = attributes[:'trade_no']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          code == o.code &&
          msg == o.msg &&
          sub_code == o.sub_code &&
          sub_msg == o.sub_msg &&
          body == o.body &&
          is_error == o.is_error &&
          buyer_logon_id == o.buyer_logon_id &&
          buyer_open_id == o.buyer_open_id &&
          buyer_user_id == o.buyer_user_id &&
          fund_change == o.fund_change &&
          gmt_refund_pay == o.gmt_refund_pay &&
          has_deposit_back == o.has_deposit_back &&
          open_id == o.open_id &&
          out_trade_no == o.out_trade_no &&
          pre_auth_cancel_fee == o.pre_auth_cancel_fee &&
          present_refund_buyer_amount == o.present_refund_buyer_amount &&
          present_refund_discount_amount == o.present_refund_discount_amount &&
          present_refund_mdiscount_amount == o.present_refund_mdiscount_amount &&
          refund_charge_amount == o.refund_charge_amount &&
          refund_charge_info_list == o.refund_charge_info_list &&
          refund_currency == o.refund_currency &&
          refund_detail_item_list == o.refund_detail_item_list &&
          refund_fee == o.refund_fee &&
          refund_hyb_amount == o.refund_hyb_amount &&
          refund_preset_paytool_list == o.refund_preset_paytool_list &&
          refund_settlement_id == o.refund_settlement_id &&
          refund_voucher_detail_list == o.refund_voucher_detail_list &&
          send_back_fee == o.send_back_fee &&
          store_name == o.store_name &&
          trade_no == o.trade_no
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [code, msg, sub_code, sub_msg, body, is_error, buyer_logon_id, buyer_open_id, buyer_user_id, fund_change, gmt_refund_pay, has_deposit_back, open_id, out_trade_no, pre_auth_cancel_fee, present_refund_buyer_amount, present_refund_discount_amount, present_refund_mdiscount_amount, refund_charge_amount, refund_charge_info_list, refund_currency, refund_detail_item_list, refund_fee, refund_hyb_amount, refund_preset_paytool_list, refund_settlement_id, refund_voucher_detail_list, send_back_fee, store_name, trade_no].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ZSGFClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
