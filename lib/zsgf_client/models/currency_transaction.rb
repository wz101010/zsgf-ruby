=begin
#用户全部 API 文档

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.13.0-SNAPSHOT

=end

require 'date'
require 'time'

module ZSGFClient
  # 货币交易记录实体，用于记录用户的货币交易详情。
  class CurrencyTransaction
    # 货币交易记录的唯一标识符。
    attr_accessor :id

    # 发起交易的发送方用户ID，若为转账交易时必填。
    attr_accessor :from_user_id

    # 进行货币交易的用户ID。
    attr_accessor :user_id

    # 货币交易的类型，例如 '消费', '奖励', '兑换', '转账' 等。
    attr_accessor :transaction_type

    # 交易的货币类型，例如 'USD', 'CNY' 等。
    attr_accessor :currency_type

    # 货币的变动数量，正数表示增加，负数表示减少。
    attr_accessor :currency_change

    # 交易完成后的货币余额。
    attr_accessor :currency_balance

    # 描述货币变动的具体原因或相关交易详情。
    attr_accessor :description

    # 货币交易的当前状态，例如 '成功', '失败', '待审核' 等。
    attr_accessor :status

    # 交易的额外信息或管理员的备注。
    attr_accessor :remark

    # 用于分类或标记交易的标签。
    attr_accessor :tags

    # 货币交易发生的时间，默认为当前时间。
    attr_accessor :create_date

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'from_user_id' => :'fromUserID',
        :'user_id' => :'userID',
        :'transaction_type' => :'transactionType',
        :'currency_type' => :'currencyType',
        :'currency_change' => :'currencyChange',
        :'currency_balance' => :'currencyBalance',
        :'description' => :'description',
        :'status' => :'status',
        :'remark' => :'remark',
        :'tags' => :'tags',
        :'create_date' => :'createDate'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Integer',
        :'from_user_id' => :'Integer',
        :'user_id' => :'Integer',
        :'transaction_type' => :'String',
        :'currency_type' => :'String',
        :'currency_change' => :'Integer',
        :'currency_balance' => :'Float',
        :'description' => :'String',
        :'status' => :'String',
        :'remark' => :'String',
        :'tags' => :'String',
        :'create_date' => :'Time'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'transaction_type',
        :'currency_type',
        :'description',
        :'status',
        :'remark',
        :'tags',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `ZSGFClient::CurrencyTransaction` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `ZSGFClient::CurrencyTransaction`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'from_user_id')
        self.from_user_id = attributes[:'from_user_id']
      end

      if attributes.key?(:'user_id')
        self.user_id = attributes[:'user_id']
      end

      if attributes.key?(:'transaction_type')
        self.transaction_type = attributes[:'transaction_type']
      end

      if attributes.key?(:'currency_type')
        self.currency_type = attributes[:'currency_type']
      end

      if attributes.key?(:'currency_change')
        self.currency_change = attributes[:'currency_change']
      end

      if attributes.key?(:'currency_balance')
        self.currency_balance = attributes[:'currency_balance']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'remark')
        self.remark = attributes[:'remark']
      end

      if attributes.key?(:'tags')
        self.tags = attributes[:'tags']
      end

      if attributes.key?(:'create_date')
        self.create_date = attributes[:'create_date']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if !@transaction_type.nil? && @transaction_type.to_s.length > 50
        invalid_properties.push('invalid value for "transaction_type", the character length must be smaller than or equal to 50.')
      end

      if !@currency_type.nil? && @currency_type.to_s.length > 50
        invalid_properties.push('invalid value for "currency_type", the character length must be smaller than or equal to 50.')
      end

      if !@status.nil? && @status.to_s.length > 50
        invalid_properties.push('invalid value for "status", the character length must be smaller than or equal to 50.')
      end

      if !@remark.nil? && @remark.to_s.length > 255
        invalid_properties.push('invalid value for "remark", the character length must be smaller than or equal to 255.')
      end

      if !@tags.nil? && @tags.to_s.length > 255
        invalid_properties.push('invalid value for "tags", the character length must be smaller than or equal to 255.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@transaction_type.nil? && @transaction_type.to_s.length > 50
      return false if !@currency_type.nil? && @currency_type.to_s.length > 50
      return false if !@status.nil? && @status.to_s.length > 50
      return false if !@remark.nil? && @remark.to_s.length > 255
      return false if !@tags.nil? && @tags.to_s.length > 255
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] transaction_type Value to be assigned
    def transaction_type=(transaction_type)
      if !transaction_type.nil? && transaction_type.to_s.length > 50
        fail ArgumentError, 'invalid value for "transaction_type", the character length must be smaller than or equal to 50.'
      end

      @transaction_type = transaction_type
    end

    # Custom attribute writer method with validation
    # @param [Object] currency_type Value to be assigned
    def currency_type=(currency_type)
      if !currency_type.nil? && currency_type.to_s.length > 50
        fail ArgumentError, 'invalid value for "currency_type", the character length must be smaller than or equal to 50.'
      end

      @currency_type = currency_type
    end

    # Custom attribute writer method with validation
    # @param [Object] status Value to be assigned
    def status=(status)
      if !status.nil? && status.to_s.length > 50
        fail ArgumentError, 'invalid value for "status", the character length must be smaller than or equal to 50.'
      end

      @status = status
    end

    # Custom attribute writer method with validation
    # @param [Object] remark Value to be assigned
    def remark=(remark)
      if !remark.nil? && remark.to_s.length > 255
        fail ArgumentError, 'invalid value for "remark", the character length must be smaller than or equal to 255.'
      end

      @remark = remark
    end

    # Custom attribute writer method with validation
    # @param [Object] tags Value to be assigned
    def tags=(tags)
      if !tags.nil? && tags.to_s.length > 255
        fail ArgumentError, 'invalid value for "tags", the character length must be smaller than or equal to 255.'
      end

      @tags = tags
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          from_user_id == o.from_user_id &&
          user_id == o.user_id &&
          transaction_type == o.transaction_type &&
          currency_type == o.currency_type &&
          currency_change == o.currency_change &&
          currency_balance == o.currency_balance &&
          description == o.description &&
          status == o.status &&
          remark == o.remark &&
          tags == o.tags &&
          create_date == o.create_date
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, from_user_id, user_id, transaction_type, currency_type, currency_change, currency_balance, description, status, remark, tags, create_date].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ZSGFClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
