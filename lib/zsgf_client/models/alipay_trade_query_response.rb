=begin
#用户全部 API 文档

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1

Generated by: https://openapi-generator.tech
Generator version: 7.13.0-SNAPSHOT

=end

require 'date'
require 'time'

module ZSGFClient
  class AlipayTradeQueryResponse
    attr_accessor :code

    attr_accessor :msg

    attr_accessor :sub_code

    attr_accessor :sub_msg

    attr_accessor :is_error

    attr_accessor :additional_status

    attr_accessor :alipay_store_id

    attr_accessor :alipay_sub_merchant_id

    attr_accessor :async_pay_apply_status

    attr_accessor :auth_trade_pay_mode

    attr_accessor :biz_settle_mode

    attr_accessor :bkagent_resp_info

    attr_accessor :body

    attr_accessor :buyer_logon_id

    attr_accessor :buyer_open_id

    attr_accessor :buyer_pay_amount

    attr_accessor :buyer_user_id

    attr_accessor :buyer_user_name

    attr_accessor :buyer_user_type

    attr_accessor :cashier_type

    attr_accessor :charge_amount

    attr_accessor :charge_flags

    attr_accessor :charge_info_list

    attr_accessor :credit_biz_order_id

    attr_accessor :credit_pay_mode

    attr_accessor :discount_amount

    attr_accessor :discount_goods_detail

    attr_accessor :enterprise_pay_info

    attr_accessor :ext_infos

    attr_accessor :fulfillment_detail_list

    attr_accessor :fund_bill_list

    attr_accessor :hb_fq_pay_info

    attr_accessor :hyb_amount

    attr_accessor :industry_sepc_detail

    attr_accessor :industry_sepc_detail_acc

    attr_accessor :industry_sepc_detail_gov

    attr_accessor :intact_charge_info_list

    attr_accessor :invoice_amount

    attr_accessor :mdiscount_amount

    attr_accessor :medical_insurance_info

    attr_accessor :open_id

    attr_accessor :out_trade_no

    attr_accessor :passback_params

    attr_accessor :pay_amount

    attr_accessor :pay_currency

    attr_accessor :payment_info_with_id_list

    attr_accessor :period_scene

    attr_accessor :point_amount

    attr_accessor :pre_auth_pay_amount

    attr_accessor :receipt_amount

    attr_accessor :receipt_currency_type

    attr_accessor :req_goods_detail

    attr_accessor :send_pay_date

    attr_accessor :settle_amount

    attr_accessor :settle_currency

    attr_accessor :settle_trans_rate

    attr_accessor :settlement_id

    attr_accessor :store_id

    attr_accessor :store_name

    attr_accessor :subject

    attr_accessor :tap_pay_info

    attr_accessor :terminal_id

    attr_accessor :total_amount

    attr_accessor :trade_no

    attr_accessor :trade_settle_info

    attr_accessor :trade_status

    attr_accessor :trans_currency

    attr_accessor :trans_pay_rate

    attr_accessor :voucher_detail_list

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'code' => :'code',
        :'msg' => :'msg',
        :'sub_code' => :'subCode',
        :'sub_msg' => :'subMsg',
        :'is_error' => :'isError',
        :'additional_status' => :'additionalStatus',
        :'alipay_store_id' => :'alipayStoreId',
        :'alipay_sub_merchant_id' => :'alipaySubMerchantId',
        :'async_pay_apply_status' => :'asyncPayApplyStatus',
        :'auth_trade_pay_mode' => :'authTradePayMode',
        :'biz_settle_mode' => :'bizSettleMode',
        :'bkagent_resp_info' => :'bkagentRespInfo',
        :'body' => :'body',
        :'buyer_logon_id' => :'buyerLogonId',
        :'buyer_open_id' => :'buyerOpenId',
        :'buyer_pay_amount' => :'buyerPayAmount',
        :'buyer_user_id' => :'buyerUserId',
        :'buyer_user_name' => :'buyerUserName',
        :'buyer_user_type' => :'buyerUserType',
        :'cashier_type' => :'cashierType',
        :'charge_amount' => :'chargeAmount',
        :'charge_flags' => :'chargeFlags',
        :'charge_info_list' => :'chargeInfoList',
        :'credit_biz_order_id' => :'creditBizOrderId',
        :'credit_pay_mode' => :'creditPayMode',
        :'discount_amount' => :'discountAmount',
        :'discount_goods_detail' => :'discountGoodsDetail',
        :'enterprise_pay_info' => :'enterprisePayInfo',
        :'ext_infos' => :'extInfos',
        :'fulfillment_detail_list' => :'fulfillmentDetailList',
        :'fund_bill_list' => :'fundBillList',
        :'hb_fq_pay_info' => :'hbFqPayInfo',
        :'hyb_amount' => :'hybAmount',
        :'industry_sepc_detail' => :'industrySepcDetail',
        :'industry_sepc_detail_acc' => :'industrySepcDetailAcc',
        :'industry_sepc_detail_gov' => :'industrySepcDetailGov',
        :'intact_charge_info_list' => :'intactChargeInfoList',
        :'invoice_amount' => :'invoiceAmount',
        :'mdiscount_amount' => :'mdiscountAmount',
        :'medical_insurance_info' => :'medicalInsuranceInfo',
        :'open_id' => :'openId',
        :'out_trade_no' => :'outTradeNo',
        :'passback_params' => :'passbackParams',
        :'pay_amount' => :'payAmount',
        :'pay_currency' => :'payCurrency',
        :'payment_info_with_id_list' => :'paymentInfoWithIdList',
        :'period_scene' => :'periodScene',
        :'point_amount' => :'pointAmount',
        :'pre_auth_pay_amount' => :'preAuthPayAmount',
        :'receipt_amount' => :'receiptAmount',
        :'receipt_currency_type' => :'receiptCurrencyType',
        :'req_goods_detail' => :'reqGoodsDetail',
        :'send_pay_date' => :'sendPayDate',
        :'settle_amount' => :'settleAmount',
        :'settle_currency' => :'settleCurrency',
        :'settle_trans_rate' => :'settleTransRate',
        :'settlement_id' => :'settlementId',
        :'store_id' => :'storeId',
        :'store_name' => :'storeName',
        :'subject' => :'subject',
        :'tap_pay_info' => :'tapPayInfo',
        :'terminal_id' => :'terminalId',
        :'total_amount' => :'totalAmount',
        :'trade_no' => :'tradeNo',
        :'trade_settle_info' => :'tradeSettleInfo',
        :'trade_status' => :'tradeStatus',
        :'trans_currency' => :'transCurrency',
        :'trans_pay_rate' => :'transPayRate',
        :'voucher_detail_list' => :'voucherDetailList'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'code' => :'String',
        :'msg' => :'String',
        :'sub_code' => :'String',
        :'sub_msg' => :'String',
        :'is_error' => :'Boolean',
        :'additional_status' => :'String',
        :'alipay_store_id' => :'String',
        :'alipay_sub_merchant_id' => :'String',
        :'async_pay_apply_status' => :'String',
        :'auth_trade_pay_mode' => :'String',
        :'biz_settle_mode' => :'String',
        :'bkagent_resp_info' => :'BkAgentRespInfo',
        :'body' => :'String',
        :'buyer_logon_id' => :'String',
        :'buyer_open_id' => :'String',
        :'buyer_pay_amount' => :'String',
        :'buyer_user_id' => :'String',
        :'buyer_user_name' => :'String',
        :'buyer_user_type' => :'String',
        :'cashier_type' => :'String',
        :'charge_amount' => :'String',
        :'charge_flags' => :'String',
        :'charge_info_list' => :'Array<ChargeInfo>',
        :'credit_biz_order_id' => :'String',
        :'credit_pay_mode' => :'String',
        :'discount_amount' => :'String',
        :'discount_goods_detail' => :'String',
        :'enterprise_pay_info' => :'EnterprisePayInfo',
        :'ext_infos' => :'String',
        :'fulfillment_detail_list' => :'Array<FulfillmentDetail>',
        :'fund_bill_list' => :'Array<TradeFundBill>',
        :'hb_fq_pay_info' => :'HbFqPayInfo',
        :'hyb_amount' => :'String',
        :'industry_sepc_detail' => :'String',
        :'industry_sepc_detail_acc' => :'String',
        :'industry_sepc_detail_gov' => :'String',
        :'intact_charge_info_list' => :'Array<IntactChargeInfo>',
        :'invoice_amount' => :'String',
        :'mdiscount_amount' => :'String',
        :'medical_insurance_info' => :'String',
        :'open_id' => :'String',
        :'out_trade_no' => :'String',
        :'passback_params' => :'String',
        :'pay_amount' => :'String',
        :'pay_currency' => :'String',
        :'payment_info_with_id_list' => :'Array<PaymentInfoWithId>',
        :'period_scene' => :'String',
        :'point_amount' => :'String',
        :'pre_auth_pay_amount' => :'String',
        :'receipt_amount' => :'String',
        :'receipt_currency_type' => :'String',
        :'req_goods_detail' => :'Array<GoodsDetail>',
        :'send_pay_date' => :'String',
        :'settle_amount' => :'String',
        :'settle_currency' => :'String',
        :'settle_trans_rate' => :'String',
        :'settlement_id' => :'String',
        :'store_id' => :'String',
        :'store_name' => :'String',
        :'subject' => :'String',
        :'tap_pay_info' => :'TapPayInfo',
        :'terminal_id' => :'String',
        :'total_amount' => :'String',
        :'trade_no' => :'String',
        :'trade_settle_info' => :'TradeSettleInfo',
        :'trade_status' => :'String',
        :'trans_currency' => :'String',
        :'trans_pay_rate' => :'String',
        :'voucher_detail_list' => :'Array<VoucherDetail>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'code',
        :'msg',
        :'sub_code',
        :'sub_msg',
        :'additional_status',
        :'alipay_store_id',
        :'alipay_sub_merchant_id',
        :'async_pay_apply_status',
        :'auth_trade_pay_mode',
        :'biz_settle_mode',
        :'body',
        :'buyer_logon_id',
        :'buyer_open_id',
        :'buyer_pay_amount',
        :'buyer_user_id',
        :'buyer_user_name',
        :'buyer_user_type',
        :'cashier_type',
        :'charge_amount',
        :'charge_flags',
        :'charge_info_list',
        :'credit_biz_order_id',
        :'credit_pay_mode',
        :'discount_amount',
        :'discount_goods_detail',
        :'ext_infos',
        :'fulfillment_detail_list',
        :'fund_bill_list',
        :'hyb_amount',
        :'industry_sepc_detail',
        :'industry_sepc_detail_acc',
        :'industry_sepc_detail_gov',
        :'intact_charge_info_list',
        :'invoice_amount',
        :'mdiscount_amount',
        :'medical_insurance_info',
        :'open_id',
        :'out_trade_no',
        :'passback_params',
        :'pay_amount',
        :'pay_currency',
        :'payment_info_with_id_list',
        :'period_scene',
        :'point_amount',
        :'pre_auth_pay_amount',
        :'receipt_amount',
        :'receipt_currency_type',
        :'req_goods_detail',
        :'send_pay_date',
        :'settle_amount',
        :'settle_currency',
        :'settle_trans_rate',
        :'settlement_id',
        :'store_id',
        :'store_name',
        :'subject',
        :'terminal_id',
        :'total_amount',
        :'trade_no',
        :'trade_status',
        :'trans_currency',
        :'trans_pay_rate',
        :'voucher_detail_list'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `ZSGFClient::AlipayTradeQueryResponse` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `ZSGFClient::AlipayTradeQueryResponse`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'code')
        self.code = attributes[:'code']
      end

      if attributes.key?(:'msg')
        self.msg = attributes[:'msg']
      end

      if attributes.key?(:'sub_code')
        self.sub_code = attributes[:'sub_code']
      end

      if attributes.key?(:'sub_msg')
        self.sub_msg = attributes[:'sub_msg']
      end

      if attributes.key?(:'is_error')
        self.is_error = attributes[:'is_error']
      end

      if attributes.key?(:'additional_status')
        self.additional_status = attributes[:'additional_status']
      end

      if attributes.key?(:'alipay_store_id')
        self.alipay_store_id = attributes[:'alipay_store_id']
      end

      if attributes.key?(:'alipay_sub_merchant_id')
        self.alipay_sub_merchant_id = attributes[:'alipay_sub_merchant_id']
      end

      if attributes.key?(:'async_pay_apply_status')
        self.async_pay_apply_status = attributes[:'async_pay_apply_status']
      end

      if attributes.key?(:'auth_trade_pay_mode')
        self.auth_trade_pay_mode = attributes[:'auth_trade_pay_mode']
      end

      if attributes.key?(:'biz_settle_mode')
        self.biz_settle_mode = attributes[:'biz_settle_mode']
      end

      if attributes.key?(:'bkagent_resp_info')
        self.bkagent_resp_info = attributes[:'bkagent_resp_info']
      end

      if attributes.key?(:'body')
        self.body = attributes[:'body']
      end

      if attributes.key?(:'buyer_logon_id')
        self.buyer_logon_id = attributes[:'buyer_logon_id']
      end

      if attributes.key?(:'buyer_open_id')
        self.buyer_open_id = attributes[:'buyer_open_id']
      end

      if attributes.key?(:'buyer_pay_amount')
        self.buyer_pay_amount = attributes[:'buyer_pay_amount']
      end

      if attributes.key?(:'buyer_user_id')
        self.buyer_user_id = attributes[:'buyer_user_id']
      end

      if attributes.key?(:'buyer_user_name')
        self.buyer_user_name = attributes[:'buyer_user_name']
      end

      if attributes.key?(:'buyer_user_type')
        self.buyer_user_type = attributes[:'buyer_user_type']
      end

      if attributes.key?(:'cashier_type')
        self.cashier_type = attributes[:'cashier_type']
      end

      if attributes.key?(:'charge_amount')
        self.charge_amount = attributes[:'charge_amount']
      end

      if attributes.key?(:'charge_flags')
        self.charge_flags = attributes[:'charge_flags']
      end

      if attributes.key?(:'charge_info_list')
        if (value = attributes[:'charge_info_list']).is_a?(Array)
          self.charge_info_list = value
        end
      end

      if attributes.key?(:'credit_biz_order_id')
        self.credit_biz_order_id = attributes[:'credit_biz_order_id']
      end

      if attributes.key?(:'credit_pay_mode')
        self.credit_pay_mode = attributes[:'credit_pay_mode']
      end

      if attributes.key?(:'discount_amount')
        self.discount_amount = attributes[:'discount_amount']
      end

      if attributes.key?(:'discount_goods_detail')
        self.discount_goods_detail = attributes[:'discount_goods_detail']
      end

      if attributes.key?(:'enterprise_pay_info')
        self.enterprise_pay_info = attributes[:'enterprise_pay_info']
      end

      if attributes.key?(:'ext_infos')
        self.ext_infos = attributes[:'ext_infos']
      end

      if attributes.key?(:'fulfillment_detail_list')
        if (value = attributes[:'fulfillment_detail_list']).is_a?(Array)
          self.fulfillment_detail_list = value
        end
      end

      if attributes.key?(:'fund_bill_list')
        if (value = attributes[:'fund_bill_list']).is_a?(Array)
          self.fund_bill_list = value
        end
      end

      if attributes.key?(:'hb_fq_pay_info')
        self.hb_fq_pay_info = attributes[:'hb_fq_pay_info']
      end

      if attributes.key?(:'hyb_amount')
        self.hyb_amount = attributes[:'hyb_amount']
      end

      if attributes.key?(:'industry_sepc_detail')
        self.industry_sepc_detail = attributes[:'industry_sepc_detail']
      end

      if attributes.key?(:'industry_sepc_detail_acc')
        self.industry_sepc_detail_acc = attributes[:'industry_sepc_detail_acc']
      end

      if attributes.key?(:'industry_sepc_detail_gov')
        self.industry_sepc_detail_gov = attributes[:'industry_sepc_detail_gov']
      end

      if attributes.key?(:'intact_charge_info_list')
        if (value = attributes[:'intact_charge_info_list']).is_a?(Array)
          self.intact_charge_info_list = value
        end
      end

      if attributes.key?(:'invoice_amount')
        self.invoice_amount = attributes[:'invoice_amount']
      end

      if attributes.key?(:'mdiscount_amount')
        self.mdiscount_amount = attributes[:'mdiscount_amount']
      end

      if attributes.key?(:'medical_insurance_info')
        self.medical_insurance_info = attributes[:'medical_insurance_info']
      end

      if attributes.key?(:'open_id')
        self.open_id = attributes[:'open_id']
      end

      if attributes.key?(:'out_trade_no')
        self.out_trade_no = attributes[:'out_trade_no']
      end

      if attributes.key?(:'passback_params')
        self.passback_params = attributes[:'passback_params']
      end

      if attributes.key?(:'pay_amount')
        self.pay_amount = attributes[:'pay_amount']
      end

      if attributes.key?(:'pay_currency')
        self.pay_currency = attributes[:'pay_currency']
      end

      if attributes.key?(:'payment_info_with_id_list')
        if (value = attributes[:'payment_info_with_id_list']).is_a?(Array)
          self.payment_info_with_id_list = value
        end
      end

      if attributes.key?(:'period_scene')
        self.period_scene = attributes[:'period_scene']
      end

      if attributes.key?(:'point_amount')
        self.point_amount = attributes[:'point_amount']
      end

      if attributes.key?(:'pre_auth_pay_amount')
        self.pre_auth_pay_amount = attributes[:'pre_auth_pay_amount']
      end

      if attributes.key?(:'receipt_amount')
        self.receipt_amount = attributes[:'receipt_amount']
      end

      if attributes.key?(:'receipt_currency_type')
        self.receipt_currency_type = attributes[:'receipt_currency_type']
      end

      if attributes.key?(:'req_goods_detail')
        if (value = attributes[:'req_goods_detail']).is_a?(Array)
          self.req_goods_detail = value
        end
      end

      if attributes.key?(:'send_pay_date')
        self.send_pay_date = attributes[:'send_pay_date']
      end

      if attributes.key?(:'settle_amount')
        self.settle_amount = attributes[:'settle_amount']
      end

      if attributes.key?(:'settle_currency')
        self.settle_currency = attributes[:'settle_currency']
      end

      if attributes.key?(:'settle_trans_rate')
        self.settle_trans_rate = attributes[:'settle_trans_rate']
      end

      if attributes.key?(:'settlement_id')
        self.settlement_id = attributes[:'settlement_id']
      end

      if attributes.key?(:'store_id')
        self.store_id = attributes[:'store_id']
      end

      if attributes.key?(:'store_name')
        self.store_name = attributes[:'store_name']
      end

      if attributes.key?(:'subject')
        self.subject = attributes[:'subject']
      end

      if attributes.key?(:'tap_pay_info')
        self.tap_pay_info = attributes[:'tap_pay_info']
      end

      if attributes.key?(:'terminal_id')
        self.terminal_id = attributes[:'terminal_id']
      end

      if attributes.key?(:'total_amount')
        self.total_amount = attributes[:'total_amount']
      end

      if attributes.key?(:'trade_no')
        self.trade_no = attributes[:'trade_no']
      end

      if attributes.key?(:'trade_settle_info')
        self.trade_settle_info = attributes[:'trade_settle_info']
      end

      if attributes.key?(:'trade_status')
        self.trade_status = attributes[:'trade_status']
      end

      if attributes.key?(:'trans_currency')
        self.trans_currency = attributes[:'trans_currency']
      end

      if attributes.key?(:'trans_pay_rate')
        self.trans_pay_rate = attributes[:'trans_pay_rate']
      end

      if attributes.key?(:'voucher_detail_list')
        if (value = attributes[:'voucher_detail_list']).is_a?(Array)
          self.voucher_detail_list = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          code == o.code &&
          msg == o.msg &&
          sub_code == o.sub_code &&
          sub_msg == o.sub_msg &&
          is_error == o.is_error &&
          additional_status == o.additional_status &&
          alipay_store_id == o.alipay_store_id &&
          alipay_sub_merchant_id == o.alipay_sub_merchant_id &&
          async_pay_apply_status == o.async_pay_apply_status &&
          auth_trade_pay_mode == o.auth_trade_pay_mode &&
          biz_settle_mode == o.biz_settle_mode &&
          bkagent_resp_info == o.bkagent_resp_info &&
          body == o.body &&
          buyer_logon_id == o.buyer_logon_id &&
          buyer_open_id == o.buyer_open_id &&
          buyer_pay_amount == o.buyer_pay_amount &&
          buyer_user_id == o.buyer_user_id &&
          buyer_user_name == o.buyer_user_name &&
          buyer_user_type == o.buyer_user_type &&
          cashier_type == o.cashier_type &&
          charge_amount == o.charge_amount &&
          charge_flags == o.charge_flags &&
          charge_info_list == o.charge_info_list &&
          credit_biz_order_id == o.credit_biz_order_id &&
          credit_pay_mode == o.credit_pay_mode &&
          discount_amount == o.discount_amount &&
          discount_goods_detail == o.discount_goods_detail &&
          enterprise_pay_info == o.enterprise_pay_info &&
          ext_infos == o.ext_infos &&
          fulfillment_detail_list == o.fulfillment_detail_list &&
          fund_bill_list == o.fund_bill_list &&
          hb_fq_pay_info == o.hb_fq_pay_info &&
          hyb_amount == o.hyb_amount &&
          industry_sepc_detail == o.industry_sepc_detail &&
          industry_sepc_detail_acc == o.industry_sepc_detail_acc &&
          industry_sepc_detail_gov == o.industry_sepc_detail_gov &&
          intact_charge_info_list == o.intact_charge_info_list &&
          invoice_amount == o.invoice_amount &&
          mdiscount_amount == o.mdiscount_amount &&
          medical_insurance_info == o.medical_insurance_info &&
          open_id == o.open_id &&
          out_trade_no == o.out_trade_no &&
          passback_params == o.passback_params &&
          pay_amount == o.pay_amount &&
          pay_currency == o.pay_currency &&
          payment_info_with_id_list == o.payment_info_with_id_list &&
          period_scene == o.period_scene &&
          point_amount == o.point_amount &&
          pre_auth_pay_amount == o.pre_auth_pay_amount &&
          receipt_amount == o.receipt_amount &&
          receipt_currency_type == o.receipt_currency_type &&
          req_goods_detail == o.req_goods_detail &&
          send_pay_date == o.send_pay_date &&
          settle_amount == o.settle_amount &&
          settle_currency == o.settle_currency &&
          settle_trans_rate == o.settle_trans_rate &&
          settlement_id == o.settlement_id &&
          store_id == o.store_id &&
          store_name == o.store_name &&
          subject == o.subject &&
          tap_pay_info == o.tap_pay_info &&
          terminal_id == o.terminal_id &&
          total_amount == o.total_amount &&
          trade_no == o.trade_no &&
          trade_settle_info == o.trade_settle_info &&
          trade_status == o.trade_status &&
          trans_currency == o.trans_currency &&
          trans_pay_rate == o.trans_pay_rate &&
          voucher_detail_list == o.voucher_detail_list
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [code, msg, sub_code, sub_msg, is_error, additional_status, alipay_store_id, alipay_sub_merchant_id, async_pay_apply_status, auth_trade_pay_mode, biz_settle_mode, bkagent_resp_info, body, buyer_logon_id, buyer_open_id, buyer_pay_amount, buyer_user_id, buyer_user_name, buyer_user_type, cashier_type, charge_amount, charge_flags, charge_info_list, credit_biz_order_id, credit_pay_mode, discount_amount, discount_goods_detail, enterprise_pay_info, ext_infos, fulfillment_detail_list, fund_bill_list, hb_fq_pay_info, hyb_amount, industry_sepc_detail, industry_sepc_detail_acc, industry_sepc_detail_gov, intact_charge_info_list, invoice_amount, mdiscount_amount, medical_insurance_info, open_id, out_trade_no, passback_params, pay_amount, pay_currency, payment_info_with_id_list, period_scene, point_amount, pre_auth_pay_amount, receipt_amount, receipt_currency_type, req_goods_detail, send_pay_date, settle_amount, settle_currency, settle_trans_rate, settlement_id, store_id, store_name, subject, tap_pay_info, terminal_id, total_amount, trade_no, trade_settle_info, trade_status, trans_currency, trans_pay_rate, voucher_detail_list].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ZSGFClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
